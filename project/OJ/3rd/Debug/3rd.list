
3rd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030c0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080031cc  080031cc  000041cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031f8  080031f8  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  080031f8  080031f8  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080031f8  080031f8  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031f8  080031f8  000041f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080031fc  080031fc  000041fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003200  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000144  2000000c  0800320c  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000150  0800320c  00005150  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cd2f  00000000  00000000  00005035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000214e  00000000  00000000  00011d64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d60  00000000  00000000  00013eb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a74  00000000  00000000  00014c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017241  00000000  00000000  0001568c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e830  00000000  00000000  0002c8cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087188  00000000  00000000  0003b0fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c2285  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000382c  00000000  00000000  000c22c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  000c5af4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080031b4 	.word	0x080031b4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080031b4 	.word	0x080031b4

0800014c <__aeabi_fmul>:
 800014c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000150:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000154:	bf1e      	ittt	ne
 8000156:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015a:	ea92 0f0c 	teqne	r2, ip
 800015e:	ea93 0f0c 	teqne	r3, ip
 8000162:	d06f      	beq.n	8000244 <__aeabi_fmul+0xf8>
 8000164:	441a      	add	r2, r3
 8000166:	ea80 0c01 	eor.w	ip, r0, r1
 800016a:	0240      	lsls	r0, r0, #9
 800016c:	bf18      	it	ne
 800016e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000172:	d01e      	beq.n	80001b2 <__aeabi_fmul+0x66>
 8000174:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000178:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800017c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000180:	fba0 3101 	umull	r3, r1, r0, r1
 8000184:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000188:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 800018c:	bf3e      	ittt	cc
 800018e:	0049      	lslcc	r1, r1, #1
 8000190:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000194:	005b      	lslcc	r3, r3, #1
 8000196:	ea40 0001 	orr.w	r0, r0, r1
 800019a:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 800019e:	2afd      	cmp	r2, #253	@ 0xfd
 80001a0:	d81d      	bhi.n	80001de <__aeabi_fmul+0x92>
 80001a2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001a6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001aa:	bf08      	it	eq
 80001ac:	f020 0001 	biceq.w	r0, r0, #1
 80001b0:	4770      	bx	lr
 80001b2:	f090 0f00 	teq	r0, #0
 80001b6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001ba:	bf08      	it	eq
 80001bc:	0249      	lsleq	r1, r1, #9
 80001be:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001c6:	3a7f      	subs	r2, #127	@ 0x7f
 80001c8:	bfc2      	ittt	gt
 80001ca:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001ce:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d2:	4770      	bxgt	lr
 80001d4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001d8:	f04f 0300 	mov.w	r3, #0
 80001dc:	3a01      	subs	r2, #1
 80001de:	dc5d      	bgt.n	800029c <__aeabi_fmul+0x150>
 80001e0:	f112 0f19 	cmn.w	r2, #25
 80001e4:	bfdc      	itt	le
 80001e6:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80001ea:	4770      	bxle	lr
 80001ec:	f1c2 0200 	rsb	r2, r2, #0
 80001f0:	0041      	lsls	r1, r0, #1
 80001f2:	fa21 f102 	lsr.w	r1, r1, r2
 80001f6:	f1c2 0220 	rsb	r2, r2, #32
 80001fa:	fa00 fc02 	lsl.w	ip, r0, r2
 80001fe:	ea5f 0031 	movs.w	r0, r1, rrx
 8000202:	f140 0000 	adc.w	r0, r0, #0
 8000206:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020a:	bf08      	it	eq
 800020c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000210:	4770      	bx	lr
 8000212:	f092 0f00 	teq	r2, #0
 8000216:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800021a:	bf02      	ittt	eq
 800021c:	0040      	lsleq	r0, r0, #1
 800021e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000222:	3a01      	subeq	r2, #1
 8000224:	d0f9      	beq.n	800021a <__aeabi_fmul+0xce>
 8000226:	ea40 000c 	orr.w	r0, r0, ip
 800022a:	f093 0f00 	teq	r3, #0
 800022e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000232:	bf02      	ittt	eq
 8000234:	0049      	lsleq	r1, r1, #1
 8000236:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800023a:	3b01      	subeq	r3, #1
 800023c:	d0f9      	beq.n	8000232 <__aeabi_fmul+0xe6>
 800023e:	ea41 010c 	orr.w	r1, r1, ip
 8000242:	e78f      	b.n	8000164 <__aeabi_fmul+0x18>
 8000244:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000248:	ea92 0f0c 	teq	r2, ip
 800024c:	bf18      	it	ne
 800024e:	ea93 0f0c 	teqne	r3, ip
 8000252:	d00a      	beq.n	800026a <__aeabi_fmul+0x11e>
 8000254:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000258:	bf18      	it	ne
 800025a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800025e:	d1d8      	bne.n	8000212 <__aeabi_fmul+0xc6>
 8000260:	ea80 0001 	eor.w	r0, r0, r1
 8000264:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000268:	4770      	bx	lr
 800026a:	f090 0f00 	teq	r0, #0
 800026e:	bf17      	itett	ne
 8000270:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000274:	4608      	moveq	r0, r1
 8000276:	f091 0f00 	teqne	r1, #0
 800027a:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800027e:	d014      	beq.n	80002aa <__aeabi_fmul+0x15e>
 8000280:	ea92 0f0c 	teq	r2, ip
 8000284:	d101      	bne.n	800028a <__aeabi_fmul+0x13e>
 8000286:	0242      	lsls	r2, r0, #9
 8000288:	d10f      	bne.n	80002aa <__aeabi_fmul+0x15e>
 800028a:	ea93 0f0c 	teq	r3, ip
 800028e:	d103      	bne.n	8000298 <__aeabi_fmul+0x14c>
 8000290:	024b      	lsls	r3, r1, #9
 8000292:	bf18      	it	ne
 8000294:	4608      	movne	r0, r1
 8000296:	d108      	bne.n	80002aa <__aeabi_fmul+0x15e>
 8000298:	ea80 0001 	eor.w	r0, r0, r1
 800029c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002a0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002a4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002a8:	4770      	bx	lr
 80002aa:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002ae:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002b2:	4770      	bx	lr

080002b4 <__aeabi_frsub>:
 80002b4:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80002b8:	e002      	b.n	80002c0 <__addsf3>
 80002ba:	bf00      	nop

080002bc <__aeabi_fsub>:
 80002bc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080002c0 <__addsf3>:
 80002c0:	0042      	lsls	r2, r0, #1
 80002c2:	bf1f      	itttt	ne
 80002c4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80002c8:	ea92 0f03 	teqne	r2, r3
 80002cc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80002d0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002d4:	d06a      	beq.n	80003ac <__addsf3+0xec>
 80002d6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80002da:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80002de:	bfc1      	itttt	gt
 80002e0:	18d2      	addgt	r2, r2, r3
 80002e2:	4041      	eorgt	r1, r0
 80002e4:	4048      	eorgt	r0, r1
 80002e6:	4041      	eorgt	r1, r0
 80002e8:	bfb8      	it	lt
 80002ea:	425b      	neglt	r3, r3
 80002ec:	2b19      	cmp	r3, #25
 80002ee:	bf88      	it	hi
 80002f0:	4770      	bxhi	lr
 80002f2:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80002f6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002fa:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80002fe:	bf18      	it	ne
 8000300:	4240      	negne	r0, r0
 8000302:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000306:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800030a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 800030e:	bf18      	it	ne
 8000310:	4249      	negne	r1, r1
 8000312:	ea92 0f03 	teq	r2, r3
 8000316:	d03f      	beq.n	8000398 <__addsf3+0xd8>
 8000318:	f1a2 0201 	sub.w	r2, r2, #1
 800031c:	fa41 fc03 	asr.w	ip, r1, r3
 8000320:	eb10 000c 	adds.w	r0, r0, ip
 8000324:	f1c3 0320 	rsb	r3, r3, #32
 8000328:	fa01 f103 	lsl.w	r1, r1, r3
 800032c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000330:	d502      	bpl.n	8000338 <__addsf3+0x78>
 8000332:	4249      	negs	r1, r1
 8000334:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000338:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 800033c:	d313      	bcc.n	8000366 <__addsf3+0xa6>
 800033e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000342:	d306      	bcc.n	8000352 <__addsf3+0x92>
 8000344:	0840      	lsrs	r0, r0, #1
 8000346:	ea4f 0131 	mov.w	r1, r1, rrx
 800034a:	f102 0201 	add.w	r2, r2, #1
 800034e:	2afe      	cmp	r2, #254	@ 0xfe
 8000350:	d251      	bcs.n	80003f6 <__addsf3+0x136>
 8000352:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000356:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800035a:	bf08      	it	eq
 800035c:	f020 0001 	biceq.w	r0, r0, #1
 8000360:	ea40 0003 	orr.w	r0, r0, r3
 8000364:	4770      	bx	lr
 8000366:	0049      	lsls	r1, r1, #1
 8000368:	eb40 0000 	adc.w	r0, r0, r0
 800036c:	3a01      	subs	r2, #1
 800036e:	bf28      	it	cs
 8000370:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000374:	d2ed      	bcs.n	8000352 <__addsf3+0x92>
 8000376:	fab0 fc80 	clz	ip, r0
 800037a:	f1ac 0c08 	sub.w	ip, ip, #8
 800037e:	ebb2 020c 	subs.w	r2, r2, ip
 8000382:	fa00 f00c 	lsl.w	r0, r0, ip
 8000386:	bfaa      	itet	ge
 8000388:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800038c:	4252      	neglt	r2, r2
 800038e:	4318      	orrge	r0, r3
 8000390:	bfbc      	itt	lt
 8000392:	40d0      	lsrlt	r0, r2
 8000394:	4318      	orrlt	r0, r3
 8000396:	4770      	bx	lr
 8000398:	f092 0f00 	teq	r2, #0
 800039c:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80003a0:	bf06      	itte	eq
 80003a2:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80003a6:	3201      	addeq	r2, #1
 80003a8:	3b01      	subne	r3, #1
 80003aa:	e7b5      	b.n	8000318 <__addsf3+0x58>
 80003ac:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003b0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003b4:	bf18      	it	ne
 80003b6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003ba:	d021      	beq.n	8000400 <__addsf3+0x140>
 80003bc:	ea92 0f03 	teq	r2, r3
 80003c0:	d004      	beq.n	80003cc <__addsf3+0x10c>
 80003c2:	f092 0f00 	teq	r2, #0
 80003c6:	bf08      	it	eq
 80003c8:	4608      	moveq	r0, r1
 80003ca:	4770      	bx	lr
 80003cc:	ea90 0f01 	teq	r0, r1
 80003d0:	bf1c      	itt	ne
 80003d2:	2000      	movne	r0, #0
 80003d4:	4770      	bxne	lr
 80003d6:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 80003da:	d104      	bne.n	80003e6 <__addsf3+0x126>
 80003dc:	0040      	lsls	r0, r0, #1
 80003de:	bf28      	it	cs
 80003e0:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80003e4:	4770      	bx	lr
 80003e6:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80003ea:	bf3c      	itt	cc
 80003ec:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 80003f0:	4770      	bxcc	lr
 80003f2:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80003f6:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80003fa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003fe:	4770      	bx	lr
 8000400:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000404:	bf16      	itet	ne
 8000406:	4608      	movne	r0, r1
 8000408:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800040c:	4601      	movne	r1, r0
 800040e:	0242      	lsls	r2, r0, #9
 8000410:	bf06      	itte	eq
 8000412:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000416:	ea90 0f01 	teqeq	r0, r1
 800041a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 800041e:	4770      	bx	lr

08000420 <__aeabi_ui2f>:
 8000420:	f04f 0300 	mov.w	r3, #0
 8000424:	e004      	b.n	8000430 <__aeabi_i2f+0x8>
 8000426:	bf00      	nop

08000428 <__aeabi_i2f>:
 8000428:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	ea5f 0c00 	movs.w	ip, r0
 8000434:	bf08      	it	eq
 8000436:	4770      	bxeq	lr
 8000438:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 800043c:	4601      	mov	r1, r0
 800043e:	f04f 0000 	mov.w	r0, #0
 8000442:	e01c      	b.n	800047e <__aeabi_l2f+0x2a>

08000444 <__aeabi_ul2f>:
 8000444:	ea50 0201 	orrs.w	r2, r0, r1
 8000448:	bf08      	it	eq
 800044a:	4770      	bxeq	lr
 800044c:	f04f 0300 	mov.w	r3, #0
 8000450:	e00a      	b.n	8000468 <__aeabi_l2f+0x14>
 8000452:	bf00      	nop

08000454 <__aeabi_l2f>:
 8000454:	ea50 0201 	orrs.w	r2, r0, r1
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000460:	d502      	bpl.n	8000468 <__aeabi_l2f+0x14>
 8000462:	4240      	negs	r0, r0
 8000464:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000468:	ea5f 0c01 	movs.w	ip, r1
 800046c:	bf02      	ittt	eq
 800046e:	4684      	moveq	ip, r0
 8000470:	4601      	moveq	r1, r0
 8000472:	2000      	moveq	r0, #0
 8000474:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000478:	bf08      	it	eq
 800047a:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800047e:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000482:	fabc f28c 	clz	r2, ip
 8000486:	3a08      	subs	r2, #8
 8000488:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800048c:	db10      	blt.n	80004b0 <__aeabi_l2f+0x5c>
 800048e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000492:	4463      	add	r3, ip
 8000494:	fa00 fc02 	lsl.w	ip, r0, r2
 8000498:	f1c2 0220 	rsb	r2, r2, #32
 800049c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004a0:	fa20 f202 	lsr.w	r2, r0, r2
 80004a4:	eb43 0002 	adc.w	r0, r3, r2
 80004a8:	bf08      	it	eq
 80004aa:	f020 0001 	biceq.w	r0, r0, #1
 80004ae:	4770      	bx	lr
 80004b0:	f102 0220 	add.w	r2, r2, #32
 80004b4:	fa01 fc02 	lsl.w	ip, r1, r2
 80004b8:	f1c2 0220 	rsb	r2, r2, #32
 80004bc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004c0:	fa21 f202 	lsr.w	r2, r1, r2
 80004c4:	eb43 0002 	adc.w	r0, r3, r2
 80004c8:	bf08      	it	eq
 80004ca:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_f2iz>:
 80004d0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80004d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80004d8:	d30f      	bcc.n	80004fa <__aeabi_f2iz+0x2a>
 80004da:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80004de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80004e2:	d90d      	bls.n	8000500 <__aeabi_f2iz+0x30>
 80004e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80004e8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80004ec:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80004f0:	fa23 f002 	lsr.w	r0, r3, r2
 80004f4:	bf18      	it	ne
 80004f6:	4240      	negne	r0, r0
 80004f8:	4770      	bx	lr
 80004fa:	f04f 0000 	mov.w	r0, #0
 80004fe:	4770      	bx	lr
 8000500:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000504:	d101      	bne.n	800050a <__aeabi_f2iz+0x3a>
 8000506:	0242      	lsls	r2, r0, #9
 8000508:	d105      	bne.n	8000516 <__aeabi_f2iz+0x46>
 800050a:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800050e:	bf08      	it	eq
 8000510:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000514:	4770      	bx	lr
 8000516:	f04f 0000 	mov.w	r0, #0
 800051a:	4770      	bx	lr

0800051c <init_fnd>:
#define true 1
#define false 0

__uint8_t _LED_0F[29];

void init_fnd() {
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0
	_LED_0F[0] = 0xC0; //0
 8000520:	4b2d      	ldr	r3, [pc, #180]	@ (80005d8 <init_fnd+0xbc>)
 8000522:	22c0      	movs	r2, #192	@ 0xc0
 8000524:	701a      	strb	r2, [r3, #0]
	_LED_0F[1] = 0xF9; //1
 8000526:	4b2c      	ldr	r3, [pc, #176]	@ (80005d8 <init_fnd+0xbc>)
 8000528:	22f9      	movs	r2, #249	@ 0xf9
 800052a:	705a      	strb	r2, [r3, #1]
	_LED_0F[2] = 0xA4; //2
 800052c:	4b2a      	ldr	r3, [pc, #168]	@ (80005d8 <init_fnd+0xbc>)
 800052e:	22a4      	movs	r2, #164	@ 0xa4
 8000530:	709a      	strb	r2, [r3, #2]
	_LED_0F[3] = 0xB0; //3
 8000532:	4b29      	ldr	r3, [pc, #164]	@ (80005d8 <init_fnd+0xbc>)
 8000534:	22b0      	movs	r2, #176	@ 0xb0
 8000536:	70da      	strb	r2, [r3, #3]
	_LED_0F[4] = 0x99; //4
 8000538:	4b27      	ldr	r3, [pc, #156]	@ (80005d8 <init_fnd+0xbc>)
 800053a:	2299      	movs	r2, #153	@ 0x99
 800053c:	711a      	strb	r2, [r3, #4]
	_LED_0F[5] = 0x92; //5
 800053e:	4b26      	ldr	r3, [pc, #152]	@ (80005d8 <init_fnd+0xbc>)
 8000540:	2292      	movs	r2, #146	@ 0x92
 8000542:	715a      	strb	r2, [r3, #5]
	_LED_0F[6] = 0x82; //6
 8000544:	4b24      	ldr	r3, [pc, #144]	@ (80005d8 <init_fnd+0xbc>)
 8000546:	2282      	movs	r2, #130	@ 0x82
 8000548:	719a      	strb	r2, [r3, #6]
	_LED_0F[7] = 0xF8; //7
 800054a:	4b23      	ldr	r3, [pc, #140]	@ (80005d8 <init_fnd+0xbc>)
 800054c:	22f8      	movs	r2, #248	@ 0xf8
 800054e:	71da      	strb	r2, [r3, #7]
	_LED_0F[8] = 0x80; //8
 8000550:	4b21      	ldr	r3, [pc, #132]	@ (80005d8 <init_fnd+0xbc>)
 8000552:	2280      	movs	r2, #128	@ 0x80
 8000554:	721a      	strb	r2, [r3, #8]
	_LED_0F[9] = 0x90; //9
 8000556:	4b20      	ldr	r3, [pc, #128]	@ (80005d8 <init_fnd+0xbc>)
 8000558:	2290      	movs	r2, #144	@ 0x90
 800055a:	725a      	strb	r2, [r3, #9]
	_LED_0F[10] = 0x88; //A
 800055c:	4b1e      	ldr	r3, [pc, #120]	@ (80005d8 <init_fnd+0xbc>)
 800055e:	2288      	movs	r2, #136	@ 0x88
 8000560:	729a      	strb	r2, [r3, #10]
	_LED_0F[11] = 0x83; //b
 8000562:	4b1d      	ldr	r3, [pc, #116]	@ (80005d8 <init_fnd+0xbc>)
 8000564:	2283      	movs	r2, #131	@ 0x83
 8000566:	72da      	strb	r2, [r3, #11]
	_LED_0F[12] = 0xC6; //C
 8000568:	4b1b      	ldr	r3, [pc, #108]	@ (80005d8 <init_fnd+0xbc>)
 800056a:	22c6      	movs	r2, #198	@ 0xc6
 800056c:	731a      	strb	r2, [r3, #12]
	_LED_0F[13] = 0xA1; //d
 800056e:	4b1a      	ldr	r3, [pc, #104]	@ (80005d8 <init_fnd+0xbc>)
 8000570:	22a1      	movs	r2, #161	@ 0xa1
 8000572:	735a      	strb	r2, [r3, #13]
	_LED_0F[14] = 0x86; //E
 8000574:	4b18      	ldr	r3, [pc, #96]	@ (80005d8 <init_fnd+0xbc>)
 8000576:	2286      	movs	r2, #134	@ 0x86
 8000578:	739a      	strb	r2, [r3, #14]
	_LED_0F[15] = 0x8E; //F
 800057a:	4b17      	ldr	r3, [pc, #92]	@ (80005d8 <init_fnd+0xbc>)
 800057c:	228e      	movs	r2, #142	@ 0x8e
 800057e:	73da      	strb	r2, [r3, #15]
	_LED_0F[16] = 0xC2; //G
 8000580:	4b15      	ldr	r3, [pc, #84]	@ (80005d8 <init_fnd+0xbc>)
 8000582:	22c2      	movs	r2, #194	@ 0xc2
 8000584:	741a      	strb	r2, [r3, #16]
	_LED_0F[17] = 0x89; //H
 8000586:	4b14      	ldr	r3, [pc, #80]	@ (80005d8 <init_fnd+0xbc>)
 8000588:	2289      	movs	r2, #137	@ 0x89
 800058a:	745a      	strb	r2, [r3, #17]
	_LED_0F[18] = 0xF9; //I
 800058c:	4b12      	ldr	r3, [pc, #72]	@ (80005d8 <init_fnd+0xbc>)
 800058e:	22f9      	movs	r2, #249	@ 0xf9
 8000590:	749a      	strb	r2, [r3, #18]
	_LED_0F[19] = 0xF1; //J
 8000592:	4b11      	ldr	r3, [pc, #68]	@ (80005d8 <init_fnd+0xbc>)
 8000594:	22f1      	movs	r2, #241	@ 0xf1
 8000596:	74da      	strb	r2, [r3, #19]
	_LED_0F[20] = 0xC3; //L
 8000598:	4b0f      	ldr	r3, [pc, #60]	@ (80005d8 <init_fnd+0xbc>)
 800059a:	22c3      	movs	r2, #195	@ 0xc3
 800059c:	751a      	strb	r2, [r3, #20]
	_LED_0F[21] = 0xA9; //n
 800059e:	4b0e      	ldr	r3, [pc, #56]	@ (80005d8 <init_fnd+0xbc>)
 80005a0:	22a9      	movs	r2, #169	@ 0xa9
 80005a2:	755a      	strb	r2, [r3, #21]
	_LED_0F[22] = 0xC0; //O
 80005a4:	4b0c      	ldr	r3, [pc, #48]	@ (80005d8 <init_fnd+0xbc>)
 80005a6:	22c0      	movs	r2, #192	@ 0xc0
 80005a8:	759a      	strb	r2, [r3, #22]
	_LED_0F[23] = 0x8C; //P
 80005aa:	4b0b      	ldr	r3, [pc, #44]	@ (80005d8 <init_fnd+0xbc>)
 80005ac:	228c      	movs	r2, #140	@ 0x8c
 80005ae:	75da      	strb	r2, [r3, #23]
	_LED_0F[24] = 0x98; //q
 80005b0:	4b09      	ldr	r3, [pc, #36]	@ (80005d8 <init_fnd+0xbc>)
 80005b2:	2298      	movs	r2, #152	@ 0x98
 80005b4:	761a      	strb	r2, [r3, #24]
	_LED_0F[25] = 0x92; //S
 80005b6:	4b08      	ldr	r3, [pc, #32]	@ (80005d8 <init_fnd+0xbc>)
 80005b8:	2292      	movs	r2, #146	@ 0x92
 80005ba:	765a      	strb	r2, [r3, #25]
	_LED_0F[26] = 0xC1; //U
 80005bc:	4b06      	ldr	r3, [pc, #24]	@ (80005d8 <init_fnd+0xbc>)
 80005be:	22c1      	movs	r2, #193	@ 0xc1
 80005c0:	769a      	strb	r2, [r3, #26]
	_LED_0F[27] = 0x91; //Y
 80005c2:	4b05      	ldr	r3, [pc, #20]	@ (80005d8 <init_fnd+0xbc>)
 80005c4:	2291      	movs	r2, #145	@ 0x91
 80005c6:	76da      	strb	r2, [r3, #27]
	_LED_0F[28] = 0xFE; //hight -
 80005c8:	4b03      	ldr	r3, [pc, #12]	@ (80005d8 <init_fnd+0xbc>)
 80005ca:	22fe      	movs	r2, #254	@ 0xfe
 80005cc:	771a      	strb	r2, [r3, #28]
}
 80005ce:	bf00      	nop
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bc80      	pop	{r7}
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	20000028 	.word	0x20000028

080005dc <send>:

void send(__uint8_t X) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	4603      	mov	r3, r0
 80005e4:	71fb      	strb	r3, [r7, #7]

	for (int i = 8; i >= 1; i--) {
 80005e6:	2308      	movs	r3, #8
 80005e8:	60fb      	str	r3, [r7, #12]
 80005ea:	e022      	b.n	8000632 <send+0x56>
		if (X & 0x80) {
 80005ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	da06      	bge.n	8000602 <send+0x26>
			HAL_GPIO_WritePin(FND_DIO_GPIO_Port, FND_DIO_Pin, HIGH);
 80005f4:	2201      	movs	r2, #1
 80005f6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005fa:	4812      	ldr	r0, [pc, #72]	@ (8000644 <send+0x68>)
 80005fc:	f001 fc57 	bl	8001eae <HAL_GPIO_WritePin>
 8000600:	e005      	b.n	800060e <send+0x32>
		} else {
			HAL_GPIO_WritePin(FND_DIO_GPIO_Port, FND_DIO_Pin, LOW);
 8000602:	2200      	movs	r2, #0
 8000604:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000608:	480e      	ldr	r0, [pc, #56]	@ (8000644 <send+0x68>)
 800060a:	f001 fc50 	bl	8001eae <HAL_GPIO_WritePin>
		}
		X <<= 1;
 800060e:	79fb      	ldrb	r3, [r7, #7]
 8000610:	005b      	lsls	r3, r3, #1
 8000612:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin(FND_SCLK_GPIO_Port, FND_SCLK_Pin, LOW);
 8000614:	2200      	movs	r2, #0
 8000616:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800061a:	480a      	ldr	r0, [pc, #40]	@ (8000644 <send+0x68>)
 800061c:	f001 fc47 	bl	8001eae <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(FND_SCLK_GPIO_Port, FND_SCLK_Pin, HIGH);
 8000620:	2201      	movs	r2, #1
 8000622:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000626:	4807      	ldr	r0, [pc, #28]	@ (8000644 <send+0x68>)
 8000628:	f001 fc41 	bl	8001eae <HAL_GPIO_WritePin>
	for (int i = 8; i >= 1; i--) {
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	3b01      	subs	r3, #1
 8000630:	60fb      	str	r3, [r7, #12]
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	2b00      	cmp	r3, #0
 8000636:	dcd9      	bgt.n	80005ec <send+0x10>
	}
}
 8000638:	bf00      	nop
 800063a:	bf00      	nop
 800063c:	3710      	adds	r7, #16
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	40010c00 	.word	0x40010c00

08000648 <send_port>:

void send_port(__uint8_t X, __uint8_t port) {
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	4603      	mov	r3, r0
 8000650:	460a      	mov	r2, r1
 8000652:	71fb      	strb	r3, [r7, #7]
 8000654:	4613      	mov	r3, r2
 8000656:	71bb      	strb	r3, [r7, #6]
	send(X);// 8bit
 8000658:	79fb      	ldrb	r3, [r7, #7]
 800065a:	4618      	mov	r0, r3
 800065c:	f7ff ffbe 	bl	80005dc <send>
	send(port); // 4 bit
 8000660:	79bb      	ldrb	r3, [r7, #6]
 8000662:	4618      	mov	r0, r3
 8000664:	f7ff ffba 	bl	80005dc <send>
	HAL_GPIO_WritePin(FND_RCLK_GPIO_Port, FND_RCLK_Pin, LOW);
 8000668:	2200      	movs	r2, #0
 800066a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800066e:	4806      	ldr	r0, [pc, #24]	@ (8000688 <send_port+0x40>)
 8000670:	f001 fc1d 	bl	8001eae <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FND_RCLK_GPIO_Port, FND_RCLK_Pin, HIGH);
 8000674:	2201      	movs	r2, #1
 8000676:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800067a:	4803      	ldr	r0, [pc, #12]	@ (8000688 <send_port+0x40>)
 800067c:	f001 fc17 	bl	8001eae <HAL_GPIO_WritePin>
}
 8000680:	bf00      	nop
 8000682:	3708      	adds	r7, #8
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	40010c00 	.word	0x40010c00

0800068c <digit4_temper>:
	}
}

static uint8_t m_tempercount = 0;

void digit4_temper(int temper) {
 800068c:	b580      	push	{r7, lr}
 800068e:	b086      	sub	sp, #24
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
	int n1, n2, n3, n4;
	n1 = (int) temper % 10;
 8000694:	687a      	ldr	r2, [r7, #4]
 8000696:	4b59      	ldr	r3, [pc, #356]	@ (80007fc <digit4_temper+0x170>)
 8000698:	fb83 1302 	smull	r1, r3, r3, r2
 800069c:	1099      	asrs	r1, r3, #2
 800069e:	17d3      	asrs	r3, r2, #31
 80006a0:	1ac9      	subs	r1, r1, r3
 80006a2:	460b      	mov	r3, r1
 80006a4:	009b      	lsls	r3, r3, #2
 80006a6:	440b      	add	r3, r1
 80006a8:	005b      	lsls	r3, r3, #1
 80006aa:	1ad3      	subs	r3, r2, r3
 80006ac:	617b      	str	r3, [r7, #20]
	n2 = (int) ((temper % 100)) / 10;
 80006ae:	687a      	ldr	r2, [r7, #4]
 80006b0:	4b53      	ldr	r3, [pc, #332]	@ (8000800 <digit4_temper+0x174>)
 80006b2:	fb83 1302 	smull	r1, r3, r3, r2
 80006b6:	1159      	asrs	r1, r3, #5
 80006b8:	17d3      	asrs	r3, r2, #31
 80006ba:	1acb      	subs	r3, r1, r3
 80006bc:	2164      	movs	r1, #100	@ 0x64
 80006be:	fb01 f303 	mul.w	r3, r1, r3
 80006c2:	1ad3      	subs	r3, r2, r3
 80006c4:	4a4d      	ldr	r2, [pc, #308]	@ (80007fc <digit4_temper+0x170>)
 80006c6:	fb82 1203 	smull	r1, r2, r2, r3
 80006ca:	1092      	asrs	r2, r2, #2
 80006cc:	17db      	asrs	r3, r3, #31
 80006ce:	1ad3      	subs	r3, r2, r3
 80006d0:	613b      	str	r3, [r7, #16]
	n3 = (int) ((temper % 1000)) / 100;
 80006d2:	687a      	ldr	r2, [r7, #4]
 80006d4:	4b4b      	ldr	r3, [pc, #300]	@ (8000804 <digit4_temper+0x178>)
 80006d6:	fb83 1302 	smull	r1, r3, r3, r2
 80006da:	1199      	asrs	r1, r3, #6
 80006dc:	17d3      	asrs	r3, r2, #31
 80006de:	1acb      	subs	r3, r1, r3
 80006e0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80006e4:	fb01 f303 	mul.w	r3, r1, r3
 80006e8:	1ad3      	subs	r3, r2, r3
 80006ea:	4a45      	ldr	r2, [pc, #276]	@ (8000800 <digit4_temper+0x174>)
 80006ec:	fb82 1203 	smull	r1, r2, r2, r3
 80006f0:	1152      	asrs	r2, r2, #5
 80006f2:	17db      	asrs	r3, r3, #31
 80006f4:	1ad3      	subs	r3, r2, r3
 80006f6:	60fb      	str	r3, [r7, #12]
	n4 = (int) ((temper % 10000)) / 1000;
 80006f8:	687a      	ldr	r2, [r7, #4]
 80006fa:	4b43      	ldr	r3, [pc, #268]	@ (8000808 <digit4_temper+0x17c>)
 80006fc:	fb83 1302 	smull	r1, r3, r3, r2
 8000700:	1319      	asrs	r1, r3, #12
 8000702:	17d3      	asrs	r3, r2, #31
 8000704:	1acb      	subs	r3, r1, r3
 8000706:	f242 7110 	movw	r1, #10000	@ 0x2710
 800070a:	fb01 f303 	mul.w	r3, r1, r3
 800070e:	1ad3      	subs	r3, r2, r3
 8000710:	4a3c      	ldr	r2, [pc, #240]	@ (8000804 <digit4_temper+0x178>)
 8000712:	fb82 1203 	smull	r1, r2, r2, r3
 8000716:	1192      	asrs	r2, r2, #6
 8000718:	17db      	asrs	r3, r3, #31
 800071a:	1ad3      	subs	r3, r2, r3
 800071c:	60bb      	str	r3, [r7, #8]

	switch (m_tempercount) {
 800071e:	4b3b      	ldr	r3, [pc, #236]	@ (800080c <digit4_temper+0x180>)
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	2b03      	cmp	r3, #3
 8000724:	d838      	bhi.n	8000798 <digit4_temper+0x10c>
 8000726:	a201      	add	r2, pc, #4	@ (adr r2, 800072c <digit4_temper+0xa0>)
 8000728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800072c:	0800073d 	.word	0x0800073d
 8000730:	0800074f 	.word	0x0800074f
 8000734:	08000767 	.word	0x08000767
 8000738:	0800077f 	.word	0x0800077f
	case 0:
		send_port(_LED_0F[n1], 0b0001);
 800073c:	4a34      	ldr	r2, [pc, #208]	@ (8000810 <digit4_temper+0x184>)
 800073e:	697b      	ldr	r3, [r7, #20]
 8000740:	4413      	add	r3, r2
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	2101      	movs	r1, #1
 8000746:	4618      	mov	r0, r3
 8000748:	f7ff ff7e 	bl	8000648 <send_port>
		break;
 800074c:	e029      	b.n	80007a2 <digit4_temper+0x116>
	case 1:
		send_port(_LED_0F[n2] & 0x7F, 0b0010);
 800074e:	4a30      	ldr	r2, [pc, #192]	@ (8000810 <digit4_temper+0x184>)
 8000750:	693b      	ldr	r3, [r7, #16]
 8000752:	4413      	add	r3, r2
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800075a:	b2db      	uxtb	r3, r3
 800075c:	2102      	movs	r1, #2
 800075e:	4618      	mov	r0, r3
 8000760:	f7ff ff72 	bl	8000648 <send_port>
		break;
 8000764:	e01d      	b.n	80007a2 <digit4_temper+0x116>
	case 2:
		if (temper > 99)
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	2b63      	cmp	r3, #99	@ 0x63
 800076a:	dd17      	ble.n	800079c <digit4_temper+0x110>
			send_port(_LED_0F[n3], 0b0100);
 800076c:	4a28      	ldr	r2, [pc, #160]	@ (8000810 <digit4_temper+0x184>)
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	4413      	add	r3, r2
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	2104      	movs	r1, #4
 8000776:	4618      	mov	r0, r3
 8000778:	f7ff ff66 	bl	8000648 <send_port>
		break;
 800077c:	e00e      	b.n	800079c <digit4_temper+0x110>
	case 3:
		if (temper > 999)
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000784:	db0c      	blt.n	80007a0 <digit4_temper+0x114>
			send_port(_LED_0F[n4], 0b1000);
 8000786:	4a22      	ldr	r2, [pc, #136]	@ (8000810 <digit4_temper+0x184>)
 8000788:	68bb      	ldr	r3, [r7, #8]
 800078a:	4413      	add	r3, r2
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	2108      	movs	r1, #8
 8000790:	4618      	mov	r0, r3
 8000792:	f7ff ff59 	bl	8000648 <send_port>
		break;
 8000796:	e003      	b.n	80007a0 <digit4_temper+0x114>
	default:
		break;
 8000798:	bf00      	nop
 800079a:	e002      	b.n	80007a2 <digit4_temper+0x116>
		break;
 800079c:	bf00      	nop
 800079e:	e000      	b.n	80007a2 <digit4_temper+0x116>
		break;
 80007a0:	bf00      	nop
	}
	m_tempercount++;
 80007a2:	4b1a      	ldr	r3, [pc, #104]	@ (800080c <digit4_temper+0x180>)
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	3301      	adds	r3, #1
 80007a8:	b2da      	uxtb	r2, r3
 80007aa:	4b18      	ldr	r3, [pc, #96]	@ (800080c <digit4_temper+0x180>)
 80007ac:	701a      	strb	r2, [r3, #0]

	if (temper>999 &&  m_tempercount>=4) {
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80007b4:	db07      	blt.n	80007c6 <digit4_temper+0x13a>
 80007b6:	4b15      	ldr	r3, [pc, #84]	@ (800080c <digit4_temper+0x180>)
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	2b03      	cmp	r3, #3
 80007bc:	d903      	bls.n	80007c6 <digit4_temper+0x13a>
		m_tempercount = 0;
 80007be:	4b13      	ldr	r3, [pc, #76]	@ (800080c <digit4_temper+0x180>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	701a      	strb	r2, [r3, #0]
 80007c4:	e015      	b.n	80007f2 <digit4_temper+0x166>
	}else if(temper>99 &&  m_tempercount>=3){
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	2b63      	cmp	r3, #99	@ 0x63
 80007ca:	dd07      	ble.n	80007dc <digit4_temper+0x150>
 80007cc:	4b0f      	ldr	r3, [pc, #60]	@ (800080c <digit4_temper+0x180>)
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	2b02      	cmp	r3, #2
 80007d2:	d903      	bls.n	80007dc <digit4_temper+0x150>
		m_tempercount = 0;
 80007d4:	4b0d      	ldr	r3, [pc, #52]	@ (800080c <digit4_temper+0x180>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	701a      	strb	r2, [r3, #0]
 80007da:	e00a      	b.n	80007f2 <digit4_temper+0x166>
	}else if(temper<=99 && m_tempercount>2){
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	2b63      	cmp	r3, #99	@ 0x63
 80007e0:	dc07      	bgt.n	80007f2 <digit4_temper+0x166>
 80007e2:	4b0a      	ldr	r3, [pc, #40]	@ (800080c <digit4_temper+0x180>)
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	2b02      	cmp	r3, #2
 80007e8:	d903      	bls.n	80007f2 <digit4_temper+0x166>
		m_tempercount = 0;
 80007ea:	4b08      	ldr	r3, [pc, #32]	@ (800080c <digit4_temper+0x180>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	701a      	strb	r2, [r3, #0]
	}
}
 80007f0:	e7ff      	b.n	80007f2 <digit4_temper+0x166>
 80007f2:	bf00      	nop
 80007f4:	3718      	adds	r7, #24
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	66666667 	.word	0x66666667
 8000800:	51eb851f 	.word	0x51eb851f
 8000804:	10624dd3 	.word	0x10624dd3
 8000808:	68db8bad 	.word	0x68db8bad
 800080c:	20000045 	.word	0x20000045
 8000810:	20000028 	.word	0x20000028

08000814 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
	  float temper = 0.0;
 800081a:	f04f 0300 	mov.w	r3, #0
 800081e:	607b      	str	r3, [r7, #4]

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 8000820:	f001 f816 	bl	8001850 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000824:	f000 f824 	bl	8000870 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000828:	f000 f92a 	bl	8000a80 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800082c:	f000 f8fe 	bl	8000a2c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000830:	f000 f864 	bl	80008fc <MX_TIM2_Init>
  MX_TIM3_Init();
 8000834:	f000 f8ae 	bl	8000994 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
//HAL_TIM_Base_Start_IT(&htim2);//timer interrupt
HAL_TIM_Base_Start_IT(&htim3);//timer interrupt
 8000838:	480c      	ldr	r0, [pc, #48]	@ (800086c <main+0x58>)
 800083a:	f001 fffb 	bl	8002834 <HAL_TIM_Base_Start_IT>

init_fnd();
 800083e:	f7ff fe6d 	bl	800051c <init_fnd>
//Ds18b20_Init();
Ds18b20_Init_simple();
 8000842:	f000 fb45 	bl	8000ed0 <Ds18b20_Init_simple>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  if(!isConverting()){
 8000846:	f000 fb39 	bl	8000ebc <isConverting>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d101      	bne.n	8000854 <main+0x40>
		  StartConverting();
 8000850:	f000 fb82 	bl	8000f58 <StartConverting>
	  }


	  	  checkConverting();
 8000854:	f000 fb96 	bl	8000f84 <checkConverting>

	  if(!isConverting()){
 8000858:	f000 fb30 	bl	8000ebc <isConverting>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d1f1      	bne.n	8000846 <main+0x32>
	  	  temper = getTemper();
 8000862:	f000 fbab 	bl	8000fbc <getTemper>
 8000866:	6078      	str	r0, [r7, #4]
	  if(!isConverting()){
 8000868:	e7ed      	b.n	8000846 <main+0x32>
 800086a:	bf00      	nop
 800086c:	20000090 	.word	0x20000090

08000870 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b090      	sub	sp, #64	@ 0x40
 8000874:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000876:	f107 0318 	add.w	r3, r7, #24
 800087a:	2228      	movs	r2, #40	@ 0x28
 800087c:	2100      	movs	r1, #0
 800087e:	4618      	mov	r0, r3
 8000880:	f002 fc6c 	bl	800315c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000884:	1d3b      	adds	r3, r7, #4
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	605a      	str	r2, [r3, #4]
 800088c:	609a      	str	r2, [r3, #8]
 800088e:	60da      	str	r2, [r3, #12]
 8000890:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000892:	2301      	movs	r3, #1
 8000894:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000896:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800089a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800089c:	2300      	movs	r3, #0
 800089e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008a0:	2301      	movs	r3, #1
 80008a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008a4:	2302      	movs	r3, #2
 80008a6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008a8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80008ae:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80008b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008b4:	f107 0318 	add.w	r3, r7, #24
 80008b8:	4618      	mov	r0, r3
 80008ba:	f001 fb11 	bl	8001ee0 <HAL_RCC_OscConfig>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80008c4:	f000 f998 	bl	8000bf8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008c8:	230f      	movs	r3, #15
 80008ca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008cc:	2302      	movs	r3, #2
 80008ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008d0:	2300      	movs	r3, #0
 80008d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008da:	2300      	movs	r3, #0
 80008dc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008de:	1d3b      	adds	r3, r7, #4
 80008e0:	2102      	movs	r1, #2
 80008e2:	4618      	mov	r0, r3
 80008e4:	f001 fd7e 	bl	80023e4 <HAL_RCC_ClockConfig>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80008ee:	f000 f983 	bl	8000bf8 <Error_Handler>
  }
}
 80008f2:	bf00      	nop
 80008f4:	3740      	adds	r7, #64	@ 0x40
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
	...

080008fc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b086      	sub	sp, #24
 8000900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000902:	f107 0308 	add.w	r3, r7, #8
 8000906:	2200      	movs	r2, #0
 8000908:	601a      	str	r2, [r3, #0]
 800090a:	605a      	str	r2, [r3, #4]
 800090c:	609a      	str	r2, [r3, #8]
 800090e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000910:	463b      	mov	r3, r7
 8000912:	2200      	movs	r2, #0
 8000914:	601a      	str	r2, [r3, #0]
 8000916:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000918:	4b1d      	ldr	r3, [pc, #116]	@ (8000990 <MX_TIM2_Init+0x94>)
 800091a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800091e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = (72-1);
 8000920:	4b1b      	ldr	r3, [pc, #108]	@ (8000990 <MX_TIM2_Init+0x94>)
 8000922:	2247      	movs	r2, #71	@ 0x47
 8000924:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000926:	4b1a      	ldr	r3, [pc, #104]	@ (8000990 <MX_TIM2_Init+0x94>)
 8000928:	2200      	movs	r2, #0
 800092a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800092c:	4b18      	ldr	r3, [pc, #96]	@ (8000990 <MX_TIM2_Init+0x94>)
 800092e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000932:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000934:	4b16      	ldr	r3, [pc, #88]	@ (8000990 <MX_TIM2_Init+0x94>)
 8000936:	2200      	movs	r2, #0
 8000938:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800093a:	4b15      	ldr	r3, [pc, #84]	@ (8000990 <MX_TIM2_Init+0x94>)
 800093c:	2200      	movs	r2, #0
 800093e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000940:	4813      	ldr	r0, [pc, #76]	@ (8000990 <MX_TIM2_Init+0x94>)
 8000942:	f001 fedd 	bl	8002700 <HAL_TIM_Base_Init>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800094c:	f000 f954 	bl	8000bf8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000950:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000954:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000956:	f107 0308 	add.w	r3, r7, #8
 800095a:	4619      	mov	r1, r3
 800095c:	480c      	ldr	r0, [pc, #48]	@ (8000990 <MX_TIM2_Init+0x94>)
 800095e:	f002 f8c3 	bl	8002ae8 <HAL_TIM_ConfigClockSource>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000968:	f000 f946 	bl	8000bf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800096c:	2300      	movs	r3, #0
 800096e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000970:	2300      	movs	r3, #0
 8000972:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000974:	463b      	mov	r3, r7
 8000976:	4619      	mov	r1, r3
 8000978:	4805      	ldr	r0, [pc, #20]	@ (8000990 <MX_TIM2_Init+0x94>)
 800097a:	f002 faa1 	bl	8002ec0 <HAL_TIMEx_MasterConfigSynchronization>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000984:	f000 f938 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000988:	bf00      	nop
 800098a:	3718      	adds	r7, #24
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	20000048 	.word	0x20000048

08000994 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b086      	sub	sp, #24
 8000998:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800099a:	f107 0308 	add.w	r3, r7, #8
 800099e:	2200      	movs	r2, #0
 80009a0:	601a      	str	r2, [r3, #0]
 80009a2:	605a      	str	r2, [r3, #4]
 80009a4:	609a      	str	r2, [r3, #8]
 80009a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009a8:	463b      	mov	r3, r7
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80009b0:	4b1c      	ldr	r3, [pc, #112]	@ (8000a24 <MX_TIM3_Init+0x90>)
 80009b2:	4a1d      	ldr	r2, [pc, #116]	@ (8000a28 <MX_TIM3_Init+0x94>)
 80009b4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 80009b6:	4b1b      	ldr	r3, [pc, #108]	@ (8000a24 <MX_TIM3_Init+0x90>)
 80009b8:	2247      	movs	r2, #71	@ 0x47
 80009ba:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009bc:	4b19      	ldr	r3, [pc, #100]	@ (8000a24 <MX_TIM3_Init+0x90>)
 80009be:	2200      	movs	r2, #0
 80009c0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 49;
 80009c2:	4b18      	ldr	r3, [pc, #96]	@ (8000a24 <MX_TIM3_Init+0x90>)
 80009c4:	2231      	movs	r2, #49	@ 0x31
 80009c6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009c8:	4b16      	ldr	r3, [pc, #88]	@ (8000a24 <MX_TIM3_Init+0x90>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ce:	4b15      	ldr	r3, [pc, #84]	@ (8000a24 <MX_TIM3_Init+0x90>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80009d4:	4813      	ldr	r0, [pc, #76]	@ (8000a24 <MX_TIM3_Init+0x90>)
 80009d6:	f001 fe93 	bl	8002700 <HAL_TIM_Base_Init>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 80009e0:	f000 f90a 	bl	8000bf8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80009ea:	f107 0308 	add.w	r3, r7, #8
 80009ee:	4619      	mov	r1, r3
 80009f0:	480c      	ldr	r0, [pc, #48]	@ (8000a24 <MX_TIM3_Init+0x90>)
 80009f2:	f002 f879 	bl	8002ae8 <HAL_TIM_ConfigClockSource>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 80009fc:	f000 f8fc 	bl	8000bf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a00:	2300      	movs	r3, #0
 8000a02:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a04:	2300      	movs	r3, #0
 8000a06:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a08:	463b      	mov	r3, r7
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4805      	ldr	r0, [pc, #20]	@ (8000a24 <MX_TIM3_Init+0x90>)
 8000a0e:	f002 fa57 	bl	8002ec0 <HAL_TIMEx_MasterConfigSynchronization>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8000a18:	f000 f8ee 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000a1c:	bf00      	nop
 8000a1e:	3718      	adds	r7, #24
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	20000090 	.word	0x20000090
 8000a28:	40000400 	.word	0x40000400

08000a2c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a30:	4b11      	ldr	r3, [pc, #68]	@ (8000a78 <MX_USART1_UART_Init+0x4c>)
 8000a32:	4a12      	ldr	r2, [pc, #72]	@ (8000a7c <MX_USART1_UART_Init+0x50>)
 8000a34:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a36:	4b10      	ldr	r3, [pc, #64]	@ (8000a78 <MX_USART1_UART_Init+0x4c>)
 8000a38:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a3c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a78 <MX_USART1_UART_Init+0x4c>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a44:	4b0c      	ldr	r3, [pc, #48]	@ (8000a78 <MX_USART1_UART_Init+0x4c>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a4a:	4b0b      	ldr	r3, [pc, #44]	@ (8000a78 <MX_USART1_UART_Init+0x4c>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a50:	4b09      	ldr	r3, [pc, #36]	@ (8000a78 <MX_USART1_UART_Init+0x4c>)
 8000a52:	220c      	movs	r2, #12
 8000a54:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a56:	4b08      	ldr	r3, [pc, #32]	@ (8000a78 <MX_USART1_UART_Init+0x4c>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a5c:	4b06      	ldr	r3, [pc, #24]	@ (8000a78 <MX_USART1_UART_Init+0x4c>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a62:	4805      	ldr	r0, [pc, #20]	@ (8000a78 <MX_USART1_UART_Init+0x4c>)
 8000a64:	f002 fa9c 	bl	8002fa0 <HAL_UART_Init>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a6e:	f000 f8c3 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	200000d8 	.word	0x200000d8
 8000a7c:	40013800 	.word	0x40013800

08000a80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b088      	sub	sp, #32
 8000a84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a86:	f107 0310 	add.w	r3, r7, #16
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]
 8000a8e:	605a      	str	r2, [r3, #4]
 8000a90:	609a      	str	r2, [r3, #8]
 8000a92:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a94:	4b54      	ldr	r3, [pc, #336]	@ (8000be8 <MX_GPIO_Init+0x168>)
 8000a96:	699b      	ldr	r3, [r3, #24]
 8000a98:	4a53      	ldr	r2, [pc, #332]	@ (8000be8 <MX_GPIO_Init+0x168>)
 8000a9a:	f043 0310 	orr.w	r3, r3, #16
 8000a9e:	6193      	str	r3, [r2, #24]
 8000aa0:	4b51      	ldr	r3, [pc, #324]	@ (8000be8 <MX_GPIO_Init+0x168>)
 8000aa2:	699b      	ldr	r3, [r3, #24]
 8000aa4:	f003 0310 	and.w	r3, r3, #16
 8000aa8:	60fb      	str	r3, [r7, #12]
 8000aaa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aac:	4b4e      	ldr	r3, [pc, #312]	@ (8000be8 <MX_GPIO_Init+0x168>)
 8000aae:	699b      	ldr	r3, [r3, #24]
 8000ab0:	4a4d      	ldr	r2, [pc, #308]	@ (8000be8 <MX_GPIO_Init+0x168>)
 8000ab2:	f043 0320 	orr.w	r3, r3, #32
 8000ab6:	6193      	str	r3, [r2, #24]
 8000ab8:	4b4b      	ldr	r3, [pc, #300]	@ (8000be8 <MX_GPIO_Init+0x168>)
 8000aba:	699b      	ldr	r3, [r3, #24]
 8000abc:	f003 0320 	and.w	r3, r3, #32
 8000ac0:	60bb      	str	r3, [r7, #8]
 8000ac2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac4:	4b48      	ldr	r3, [pc, #288]	@ (8000be8 <MX_GPIO_Init+0x168>)
 8000ac6:	699b      	ldr	r3, [r3, #24]
 8000ac8:	4a47      	ldr	r2, [pc, #284]	@ (8000be8 <MX_GPIO_Init+0x168>)
 8000aca:	f043 0304 	orr.w	r3, r3, #4
 8000ace:	6193      	str	r3, [r2, #24]
 8000ad0:	4b45      	ldr	r3, [pc, #276]	@ (8000be8 <MX_GPIO_Init+0x168>)
 8000ad2:	699b      	ldr	r3, [r3, #24]
 8000ad4:	f003 0304 	and.w	r3, r3, #4
 8000ad8:	607b      	str	r3, [r7, #4]
 8000ada:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000adc:	4b42      	ldr	r3, [pc, #264]	@ (8000be8 <MX_GPIO_Init+0x168>)
 8000ade:	699b      	ldr	r3, [r3, #24]
 8000ae0:	4a41      	ldr	r2, [pc, #260]	@ (8000be8 <MX_GPIO_Init+0x168>)
 8000ae2:	f043 0308 	orr.w	r3, r3, #8
 8000ae6:	6193      	str	r3, [r2, #24]
 8000ae8:	4b3f      	ldr	r3, [pc, #252]	@ (8000be8 <MX_GPIO_Init+0x168>)
 8000aea:	699b      	ldr	r3, [r3, #24]
 8000aec:	f003 0308 	and.w	r3, r3, #8
 8000af0:	603b      	str	r3, [r7, #0]
 8000af2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_LED_GPIO_Port, GPIO_LED_Pin, GPIO_PIN_SET);
 8000af4:	2201      	movs	r2, #1
 8000af6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000afa:	483c      	ldr	r0, [pc, #240]	@ (8000bec <MX_GPIO_Init+0x16c>)
 8000afc:	f001 f9d7 	bl	8001eae <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PA3_TEMP_DATA_GPIO_Port, PA3_TEMP_DATA_Pin, GPIO_PIN_SET);
 8000b00:	2201      	movs	r2, #1
 8000b02:	2108      	movs	r1, #8
 8000b04:	483a      	ldr	r0, [pc, #232]	@ (8000bf0 <MX_GPIO_Init+0x170>)
 8000b06:	f001 f9d2 	bl	8001eae <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, FND_RCLK_Pin|FND_DIO_Pin|FND_SCLK_Pin|PB6_LED1_Pin, GPIO_PIN_SET);
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	f24e 0140 	movw	r1, #57408	@ 0xe040
 8000b10:	4838      	ldr	r0, [pc, #224]	@ (8000bf4 <MX_GPIO_Init+0x174>)
 8000b12:	f001 f9cc 	bl	8001eae <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PB5_RELAY_ON_OFF_CTRL_GPIO_Port, PB5_RELAY_ON_OFF_CTRL_Pin, GPIO_PIN_RESET);
 8000b16:	2200      	movs	r2, #0
 8000b18:	2120      	movs	r1, #32
 8000b1a:	4836      	ldr	r0, [pc, #216]	@ (8000bf4 <MX_GPIO_Init+0x174>)
 8000b1c:	f001 f9c7 	bl	8001eae <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GPIO_LED_Pin */
  GPIO_InitStruct.Pin = GPIO_LED_Pin;
 8000b20:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b26:	2301      	movs	r3, #1
 8000b28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b2e:	2303      	movs	r3, #3
 8000b30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIO_LED_GPIO_Port, &GPIO_InitStruct);
 8000b32:	f107 0310 	add.w	r3, r7, #16
 8000b36:	4619      	mov	r1, r3
 8000b38:	482c      	ldr	r0, [pc, #176]	@ (8000bec <MX_GPIO_Init+0x16c>)
 8000b3a:	f001 f81d 	bl	8001b78 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_SW_Pin */
  GPIO_InitStruct.Pin = GPIO_SW_Pin;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b42:	2300      	movs	r3, #0
 8000b44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b46:	2301      	movs	r3, #1
 8000b48:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIO_SW_GPIO_Port, &GPIO_InitStruct);
 8000b4a:	f107 0310 	add.w	r3, r7, #16
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4827      	ldr	r0, [pc, #156]	@ (8000bf0 <MX_GPIO_Init+0x170>)
 8000b52:	f001 f811 	bl	8001b78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3_TEMP_DATA_Pin */
  GPIO_InitStruct.Pin = PA3_TEMP_DATA_Pin;
 8000b56:	2308      	movs	r3, #8
 8000b58:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b62:	2303      	movs	r3, #3
 8000b64:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PA3_TEMP_DATA_GPIO_Port, &GPIO_InitStruct);
 8000b66:	f107 0310 	add.w	r3, r7, #16
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4820      	ldr	r0, [pc, #128]	@ (8000bf0 <MX_GPIO_Init+0x170>)
 8000b6e:	f001 f803 	bl	8001b78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0_TEMP_SETUP_Pin */
  GPIO_InitStruct.Pin = PB0_TEMP_SETUP_Pin;
 8000b72:	2301      	movs	r3, #1
 8000b74:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b76:	2300      	movs	r3, #0
 8000b78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(PB0_TEMP_SETUP_GPIO_Port, &GPIO_InitStruct);
 8000b7e:	f107 0310 	add.w	r3, r7, #16
 8000b82:	4619      	mov	r1, r3
 8000b84:	481b      	ldr	r0, [pc, #108]	@ (8000bf4 <MX_GPIO_Init+0x174>)
 8000b86:	f000 fff7 	bl	8001b78 <HAL_GPIO_Init>

  /*Configure GPIO pins : FND_RCLK_Pin FND_DIO_Pin FND_SCLK_Pin */
  GPIO_InitStruct.Pin = FND_RCLK_Pin|FND_DIO_Pin|FND_SCLK_Pin;
 8000b8a:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000b8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b90:	2301      	movs	r3, #1
 8000b92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b94:	2301      	movs	r3, #1
 8000b96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b98:	2303      	movs	r3, #3
 8000b9a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b9c:	f107 0310 	add.w	r3, r7, #16
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4814      	ldr	r0, [pc, #80]	@ (8000bf4 <MX_GPIO_Init+0x174>)
 8000ba4:	f000 ffe8 	bl	8001b78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5_RELAY_ON_OFF_CTRL_Pin */
  GPIO_InitStruct.Pin = PB5_RELAY_ON_OFF_CTRL_Pin;
 8000ba8:	2320      	movs	r3, #32
 8000baa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bac:	2301      	movs	r3, #1
 8000bae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bb4:	2303      	movs	r3, #3
 8000bb6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PB5_RELAY_ON_OFF_CTRL_GPIO_Port, &GPIO_InitStruct);
 8000bb8:	f107 0310 	add.w	r3, r7, #16
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	480d      	ldr	r0, [pc, #52]	@ (8000bf4 <MX_GPIO_Init+0x174>)
 8000bc0:	f000 ffda 	bl	8001b78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6_LED1_Pin */
  GPIO_InitStruct.Pin = PB6_LED1_Pin;
 8000bc4:	2340      	movs	r3, #64	@ 0x40
 8000bc6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PB6_LED1_GPIO_Port, &GPIO_InitStruct);
 8000bd4:	f107 0310 	add.w	r3, r7, #16
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4806      	ldr	r0, [pc, #24]	@ (8000bf4 <MX_GPIO_Init+0x174>)
 8000bdc:	f000 ffcc 	bl	8001b78 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000be0:	bf00      	nop
 8000be2:	3720      	adds	r7, #32
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	40021000 	.word	0x40021000
 8000bec:	40011000 	.word	0x40011000
 8000bf0:	40010800 	.word	0x40010800
 8000bf4:	40010c00 	.word	0x40010c00

08000bf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bfc:	b672      	cpsid	i
}
 8000bfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c00:	bf00      	nop
 8000c02:	e7fd      	b.n	8000c00 <Error_Handler+0x8>

08000c04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b085      	sub	sp, #20
 8000c08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c0a:	4b15      	ldr	r3, [pc, #84]	@ (8000c60 <HAL_MspInit+0x5c>)
 8000c0c:	699b      	ldr	r3, [r3, #24]
 8000c0e:	4a14      	ldr	r2, [pc, #80]	@ (8000c60 <HAL_MspInit+0x5c>)
 8000c10:	f043 0301 	orr.w	r3, r3, #1
 8000c14:	6193      	str	r3, [r2, #24]
 8000c16:	4b12      	ldr	r3, [pc, #72]	@ (8000c60 <HAL_MspInit+0x5c>)
 8000c18:	699b      	ldr	r3, [r3, #24]
 8000c1a:	f003 0301 	and.w	r3, r3, #1
 8000c1e:	60bb      	str	r3, [r7, #8]
 8000c20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c22:	4b0f      	ldr	r3, [pc, #60]	@ (8000c60 <HAL_MspInit+0x5c>)
 8000c24:	69db      	ldr	r3, [r3, #28]
 8000c26:	4a0e      	ldr	r2, [pc, #56]	@ (8000c60 <HAL_MspInit+0x5c>)
 8000c28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c2c:	61d3      	str	r3, [r2, #28]
 8000c2e:	4b0c      	ldr	r3, [pc, #48]	@ (8000c60 <HAL_MspInit+0x5c>)
 8000c30:	69db      	ldr	r3, [r3, #28]
 8000c32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c36:	607b      	str	r3, [r7, #4]
 8000c38:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c3a:	4b0a      	ldr	r3, [pc, #40]	@ (8000c64 <HAL_MspInit+0x60>)
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	4a04      	ldr	r2, [pc, #16]	@ (8000c64 <HAL_MspInit+0x60>)
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c56:	bf00      	nop
 8000c58:	3714      	adds	r7, #20
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bc80      	pop	{r7}
 8000c5e:	4770      	bx	lr
 8000c60:	40021000 	.word	0x40021000
 8000c64:	40010000 	.word	0x40010000

08000c68 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b084      	sub	sp, #16
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c78:	d114      	bne.n	8000ca4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c7a:	4b19      	ldr	r3, [pc, #100]	@ (8000ce0 <HAL_TIM_Base_MspInit+0x78>)
 8000c7c:	69db      	ldr	r3, [r3, #28]
 8000c7e:	4a18      	ldr	r2, [pc, #96]	@ (8000ce0 <HAL_TIM_Base_MspInit+0x78>)
 8000c80:	f043 0301 	orr.w	r3, r3, #1
 8000c84:	61d3      	str	r3, [r2, #28]
 8000c86:	4b16      	ldr	r3, [pc, #88]	@ (8000ce0 <HAL_TIM_Base_MspInit+0x78>)
 8000c88:	69db      	ldr	r3, [r3, #28]
 8000c8a:	f003 0301 	and.w	r3, r3, #1
 8000c8e:	60fb      	str	r3, [r7, #12]
 8000c90:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000c92:	2200      	movs	r2, #0
 8000c94:	2100      	movs	r1, #0
 8000c96:	201c      	movs	r0, #28
 8000c98:	f000 ff37 	bl	8001b0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c9c:	201c      	movs	r0, #28
 8000c9e:	f000 ff50 	bl	8001b42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000ca2:	e018      	b.n	8000cd6 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a0e      	ldr	r2, [pc, #56]	@ (8000ce4 <HAL_TIM_Base_MspInit+0x7c>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d113      	bne.n	8000cd6 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000cae:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce0 <HAL_TIM_Base_MspInit+0x78>)
 8000cb0:	69db      	ldr	r3, [r3, #28]
 8000cb2:	4a0b      	ldr	r2, [pc, #44]	@ (8000ce0 <HAL_TIM_Base_MspInit+0x78>)
 8000cb4:	f043 0302 	orr.w	r3, r3, #2
 8000cb8:	61d3      	str	r3, [r2, #28]
 8000cba:	4b09      	ldr	r3, [pc, #36]	@ (8000ce0 <HAL_TIM_Base_MspInit+0x78>)
 8000cbc:	69db      	ldr	r3, [r3, #28]
 8000cbe:	f003 0302 	and.w	r3, r3, #2
 8000cc2:	60bb      	str	r3, [r7, #8]
 8000cc4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 10, 0);
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	210a      	movs	r1, #10
 8000cca:	201d      	movs	r0, #29
 8000ccc:	f000 ff1d 	bl	8001b0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000cd0:	201d      	movs	r0, #29
 8000cd2:	f000 ff36 	bl	8001b42 <HAL_NVIC_EnableIRQ>
}
 8000cd6:	bf00      	nop
 8000cd8:	3710      	adds	r7, #16
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40021000 	.word	0x40021000
 8000ce4:	40000400 	.word	0x40000400

08000ce8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b088      	sub	sp, #32
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf0:	f107 0310 	add.w	r3, r7, #16
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
 8000cf8:	605a      	str	r2, [r3, #4]
 8000cfa:	609a      	str	r2, [r3, #8]
 8000cfc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4a1c      	ldr	r2, [pc, #112]	@ (8000d74 <HAL_UART_MspInit+0x8c>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d131      	bne.n	8000d6c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d08:	4b1b      	ldr	r3, [pc, #108]	@ (8000d78 <HAL_UART_MspInit+0x90>)
 8000d0a:	699b      	ldr	r3, [r3, #24]
 8000d0c:	4a1a      	ldr	r2, [pc, #104]	@ (8000d78 <HAL_UART_MspInit+0x90>)
 8000d0e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d12:	6193      	str	r3, [r2, #24]
 8000d14:	4b18      	ldr	r3, [pc, #96]	@ (8000d78 <HAL_UART_MspInit+0x90>)
 8000d16:	699b      	ldr	r3, [r3, #24]
 8000d18:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d1c:	60fb      	str	r3, [r7, #12]
 8000d1e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d20:	4b15      	ldr	r3, [pc, #84]	@ (8000d78 <HAL_UART_MspInit+0x90>)
 8000d22:	699b      	ldr	r3, [r3, #24]
 8000d24:	4a14      	ldr	r2, [pc, #80]	@ (8000d78 <HAL_UART_MspInit+0x90>)
 8000d26:	f043 0304 	orr.w	r3, r3, #4
 8000d2a:	6193      	str	r3, [r2, #24]
 8000d2c:	4b12      	ldr	r3, [pc, #72]	@ (8000d78 <HAL_UART_MspInit+0x90>)
 8000d2e:	699b      	ldr	r3, [r3, #24]
 8000d30:	f003 0304 	and.w	r3, r3, #4
 8000d34:	60bb      	str	r3, [r7, #8]
 8000d36:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d38:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d3c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3e:	2302      	movs	r3, #2
 8000d40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d42:	2303      	movs	r3, #3
 8000d44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d46:	f107 0310 	add.w	r3, r7, #16
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	480b      	ldr	r0, [pc, #44]	@ (8000d7c <HAL_UART_MspInit+0x94>)
 8000d4e:	f000 ff13 	bl	8001b78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d52:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d56:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d60:	f107 0310 	add.w	r3, r7, #16
 8000d64:	4619      	mov	r1, r3
 8000d66:	4805      	ldr	r0, [pc, #20]	@ (8000d7c <HAL_UART_MspInit+0x94>)
 8000d68:	f000 ff06 	bl	8001b78 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000d6c:	bf00      	nop
 8000d6e:	3720      	adds	r7, #32
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	40013800 	.word	0x40013800
 8000d78:	40021000 	.word	0x40021000
 8000d7c:	40010800 	.word	0x40010800

08000d80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d84:	bf00      	nop
 8000d86:	e7fd      	b.n	8000d84 <NMI_Handler+0x4>

08000d88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d8c:	bf00      	nop
 8000d8e:	e7fd      	b.n	8000d8c <HardFault_Handler+0x4>

08000d90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d94:	bf00      	nop
 8000d96:	e7fd      	b.n	8000d94 <MemManage_Handler+0x4>

08000d98 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d9c:	bf00      	nop
 8000d9e:	e7fd      	b.n	8000d9c <BusFault_Handler+0x4>

08000da0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000da4:	bf00      	nop
 8000da6:	e7fd      	b.n	8000da4 <UsageFault_Handler+0x4>

08000da8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dac:	bf00      	nop
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bc80      	pop	{r7}
 8000db2:	4770      	bx	lr

08000db4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000db8:	bf00      	nop
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bc80      	pop	{r7}
 8000dbe:	4770      	bx	lr

08000dc0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dc4:	bf00      	nop
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bc80      	pop	{r7}
 8000dca:	4770      	bx	lr

08000dcc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dd0:	f000 fd84 	bl	80018dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dd4:	bf00      	nop
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	m_time++;
 8000ddc:	4b04      	ldr	r3, [pc, #16]	@ (8000df0 <TIM2_IRQHandler+0x18>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	3301      	adds	r3, #1
 8000de2:	4a03      	ldr	r2, [pc, #12]	@ (8000df0 <TIM2_IRQHandler+0x18>)
 8000de4:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000de6:	4803      	ldr	r0, [pc, #12]	@ (8000df4 <TIM2_IRQHandler+0x1c>)
 8000de8:	f001 fd76 	bl	80028d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000dec:	bf00      	nop
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	20000120 	.word	0x20000120
 8000df4:	20000048 	.word	0x20000048

08000df8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	if(isTemperSensorInit() && !isBusy()){
 8000dfc:	f000 f84c 	bl	8000e98 <isTemperSensorInit>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d013      	beq.n	8000e2e <TIM3_IRQHandler+0x36>
 8000e06:	f000 f851 	bl	8000eac <isBusy>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d10e      	bne.n	8000e2e <TIM3_IRQHandler+0x36>

		digit4_temper((int)(getCurrentTemper()*10));
 8000e10:	f000 fafa 	bl	8001408 <getCurrentTemper>
 8000e14:	4603      	mov	r3, r0
 8000e16:	4908      	ldr	r1, [pc, #32]	@ (8000e38 <TIM3_IRQHandler+0x40>)
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff f997 	bl	800014c <__aeabi_fmul>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	4618      	mov	r0, r3
 8000e22:	f7ff fb55 	bl	80004d0 <__aeabi_f2iz>
 8000e26:	4603      	mov	r3, r0
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f7ff fc2f 	bl	800068c <digit4_temper>
	}
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000e2e:	4803      	ldr	r0, [pc, #12]	@ (8000e3c <TIM3_IRQHandler+0x44>)
 8000e30:	f001 fd52 	bl	80028d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000e34:	bf00      	nop
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	41200000 	.word	0x41200000
 8000e3c:	20000090 	.word	0x20000090

08000e40 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bc80      	pop	{r7}
 8000e4a:	4770      	bx	lr

08000e4c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e4c:	f7ff fff8 	bl	8000e40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e50:	480b      	ldr	r0, [pc, #44]	@ (8000e80 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000e52:	490c      	ldr	r1, [pc, #48]	@ (8000e84 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000e54:	4a0c      	ldr	r2, [pc, #48]	@ (8000e88 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000e56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e58:	e002      	b.n	8000e60 <LoopCopyDataInit>

08000e5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e5e:	3304      	adds	r3, #4

08000e60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e64:	d3f9      	bcc.n	8000e5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e66:	4a09      	ldr	r2, [pc, #36]	@ (8000e8c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000e68:	4c09      	ldr	r4, [pc, #36]	@ (8000e90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e6c:	e001      	b.n	8000e72 <LoopFillZerobss>

08000e6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e70:	3204      	adds	r2, #4

08000e72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e74:	d3fb      	bcc.n	8000e6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e76:	f002 f979 	bl	800316c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e7a:	f7ff fccb 	bl	8000814 <main>
  bx lr
 8000e7e:	4770      	bx	lr
  ldr r0, =_sdata
 8000e80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e84:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e88:	08003200 	.word	0x08003200
  ldr r2, =_sbss
 8000e8c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e90:	20000150 	.word	0x20000150

08000e94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e94:	e7fe      	b.n	8000e94 <ADC1_2_IRQHandler>
	...

08000e98 <isTemperSensorInit>:
static uint8_t m_init =0;
static uint8_t m_busy =0;
static uint8_t m_isConverting;

// return 함수
uint8_t isTemperSensorInit(){
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
	return m_init;
 8000e9c:	4b02      	ldr	r3, [pc, #8]	@ (8000ea8 <isTemperSensorInit+0x10>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bc80      	pop	{r7}
 8000ea6:	4770      	bx	lr
 8000ea8:	20000148 	.word	0x20000148

08000eac <isBusy>:

// init이 됐으면 1로 반환이 된다??
uint8_t isBusy(){
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0

	return isBusyLine();
 8000eb0:	f000 fab4 	bl	800141c <isBusyLine>
 8000eb4:	4603      	mov	r3, r0
	//	return m_busy;
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	bd80      	pop	{r7, pc}
	...

08000ebc <isConverting>:

// init이 됐으면 1로 반환이 된다??
uint8_t isConverting(){
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
	return m_isConverting;
 8000ec0:	4b02      	ldr	r3, [pc, #8]	@ (8000ecc <isConverting+0x10>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bc80      	pop	{r7}
 8000eca:	4770      	bx	lr
 8000ecc:	2000014a 	.word	0x2000014a

08000ed0 <Ds18b20_Init_simple>:


bool	Ds18b20_Init_simple(){
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
	m_init =0;
 8000ed4:	4b1c      	ldr	r3, [pc, #112]	@ (8000f48 <Ds18b20_Init_simple+0x78>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	701a      	strb	r2, [r3, #0]
	OneWire_Init(&OneWire,_DS18B20_GPIO ,_DS18B20_PIN);
 8000eda:	2208      	movs	r2, #8
 8000edc:	491b      	ldr	r1, [pc, #108]	@ (8000f4c <Ds18b20_Init_simple+0x7c>)
 8000ede:	481c      	ldr	r0, [pc, #112]	@ (8000f50 <Ds18b20_Init_simple+0x80>)
 8000ee0:	f000 fb0e 	bl	8001500 <OneWire_Init>
	// 주소를 찾는 동작 하드코딩 OneWire_First(&OneWire);
	//함수 위주로 본다 (값이 쓰이는거 위주로)
	OneWire.ROM_NO[0] = 0x28;
 8000ee4:	4b1a      	ldr	r3, [pc, #104]	@ (8000f50 <Ds18b20_Init_simple+0x80>)
 8000ee6:	2228      	movs	r2, #40	@ 0x28
 8000ee8:	725a      	strb	r2, [r3, #9]
	OneWire.ROM_NO[1] = 0xf9;
 8000eea:	4b19      	ldr	r3, [pc, #100]	@ (8000f50 <Ds18b20_Init_simple+0x80>)
 8000eec:	22f9      	movs	r2, #249	@ 0xf9
 8000eee:	729a      	strb	r2, [r3, #10]
	OneWire.ROM_NO[2] = 0x1e;
 8000ef0:	4b17      	ldr	r3, [pc, #92]	@ (8000f50 <Ds18b20_Init_simple+0x80>)
 8000ef2:	221e      	movs	r2, #30
 8000ef4:	72da      	strb	r2, [r3, #11]
	OneWire.ROM_NO[3] = 0x43;
 8000ef6:	4b16      	ldr	r3, [pc, #88]	@ (8000f50 <Ds18b20_Init_simple+0x80>)
 8000ef8:	2243      	movs	r2, #67	@ 0x43
 8000efa:	731a      	strb	r2, [r3, #12]
	OneWire.ROM_NO[4] = 0xd4;
 8000efc:	4b14      	ldr	r3, [pc, #80]	@ (8000f50 <Ds18b20_Init_simple+0x80>)
 8000efe:	22d4      	movs	r2, #212	@ 0xd4
 8000f00:	735a      	strb	r2, [r3, #13]
	OneWire.ROM_NO[5] = 0xe1;
 8000f02:	4b13      	ldr	r3, [pc, #76]	@ (8000f50 <Ds18b20_Init_simple+0x80>)
 8000f04:	22e1      	movs	r2, #225	@ 0xe1
 8000f06:	739a      	strb	r2, [r3, #14]
	OneWire.ROM_NO[6] = 0x3c;
 8000f08:	4b11      	ldr	r3, [pc, #68]	@ (8000f50 <Ds18b20_Init_simple+0x80>)
 8000f0a:	223c      	movs	r2, #60	@ 0x3c
 8000f0c:	73da      	strb	r2, [r3, #15]
	OneWire.ROM_NO[7] = 0x67;
 8000f0e:	4b10      	ldr	r3, [pc, #64]	@ (8000f50 <Ds18b20_Init_simple+0x80>)
 8000f10:	2267      	movs	r2, #103	@ 0x67
 8000f12:	741a      	strb	r2, [r3, #16]

	OneWire_GetFullROM(&OneWire, temperSensor.Address);
 8000f14:	490f      	ldr	r1, [pc, #60]	@ (8000f54 <Ds18b20_Init_simple+0x84>)
 8000f16:	480e      	ldr	r0, [pc, #56]	@ (8000f50 <Ds18b20_Init_simple+0x80>)
 8000f18:	f000 fc46 	bl	80017a8 <OneWire_GetFullROM>

	Ds18b20Delay(50);
 8000f1c:	2032      	movs	r0, #50	@ 0x32
 8000f1e:	f000 fcf9 	bl	8001914 <HAL_Delay>
	DS18B20_SetResolution(&OneWire, temperSensor.Address,	DS18B20_Resolution_12bits);
 8000f22:	220c      	movs	r2, #12
 8000f24:	490b      	ldr	r1, [pc, #44]	@ (8000f54 <Ds18b20_Init_simple+0x84>)
 8000f26:	480a      	ldr	r0, [pc, #40]	@ (8000f50 <Ds18b20_Init_simple+0x80>)
 8000f28:	f000 f96e 	bl	8001208 <DS18B20_SetResolution>
	Ds18b20Delay(50);
 8000f2c:	2032      	movs	r0, #50	@ 0x32
 8000f2e:	f000 fcf1 	bl	8001914 <HAL_Delay>
	DS18B20_DisableAlarmTemperature(&OneWire, temperSensor.Address);
 8000f32:	4908      	ldr	r1, [pc, #32]	@ (8000f54 <Ds18b20_Init_simple+0x84>)
 8000f34:	4806      	ldr	r0, [pc, #24]	@ (8000f50 <Ds18b20_Init_simple+0x80>)
 8000f36:	f000 f9ff 	bl	8001338 <DS18B20_DisableAlarmTemperature>

	m_init =1;
 8000f3a:	4b03      	ldr	r3, [pc, #12]	@ (8000f48 <Ds18b20_Init_simple+0x78>)
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	701a      	strb	r2, [r3, #0]

	return true;
 8000f40:	2301      	movs	r3, #1
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	20000148 	.word	0x20000148
 8000f4c:	40010800 	.word	0x40010800
 8000f50:	20000134 	.word	0x20000134
 8000f54:	20000124 	.word	0x20000124

08000f58 <StartConverting>:
	return true;
}
#endif
//###########################################################################################

void StartConverting(){
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0

	m_busy = 1; // 바쁜 동안
 8000f5c:	4b06      	ldr	r3, [pc, #24]	@ (8000f78 <StartConverting+0x20>)
 8000f5e:	2201      	movs	r2, #1
 8000f60:	701a      	strb	r2, [r3, #0]
	DS18B20_StartAll(&OneWire);
 8000f62:	4806      	ldr	r0, [pc, #24]	@ (8000f7c <StartConverting+0x24>)
 8000f64:	f000 f84a 	bl	8000ffc <DS18B20_StartAll>
	m_isConverting =1;
 8000f68:	4b05      	ldr	r3, [pc, #20]	@ (8000f80 <StartConverting+0x28>)
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	701a      	strb	r2, [r3, #0]
	m_busy = 0; // 안바쁜동안으로 분기
 8000f6e:	4b02      	ldr	r3, [pc, #8]	@ (8000f78 <StartConverting+0x20>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	701a      	strb	r2, [r3, #0]
}
 8000f74:	bf00      	nop
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	20000149 	.word	0x20000149
 8000f7c:	20000134 	.word	0x20000134
 8000f80:	2000014a 	.word	0x2000014a

08000f84 <checkConverting>:
//	while (!DS18B20_AllDone(&OneWire))
void checkConverting(){
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0

	m_busy =1; //비트를 읽고 있냐 아니냐
 8000f88:	4b09      	ldr	r3, [pc, #36]	@ (8000fb0 <checkConverting+0x2c>)
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	701a      	strb	r2, [r3, #0]
	m_isConverting = !DS18B20_AllDone(&OneWire); // 완료 1, 비 완료 0
 8000f8e:	4809      	ldr	r0, [pc, #36]	@ (8000fb4 <checkConverting+0x30>)
 8000f90:	f000 fa2d 	bl	80013ee <DS18B20_AllDone>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	bf0c      	ite	eq
 8000f9a:	2301      	moveq	r3, #1
 8000f9c:	2300      	movne	r3, #0
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	461a      	mov	r2, r3
 8000fa2:	4b05      	ldr	r3, [pc, #20]	@ (8000fb8 <checkConverting+0x34>)
 8000fa4:	701a      	strb	r2, [r3, #0]
	m_busy =0; //비트를 읽고 있냐 아니냐
 8000fa6:	4b02      	ldr	r3, [pc, #8]	@ (8000fb0 <checkConverting+0x2c>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	701a      	strb	r2, [r3, #0]

}
 8000fac:	bf00      	nop
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	20000149 	.word	0x20000149
 8000fb4:	20000134 	.word	0x20000134
 8000fb8:	2000014a 	.word	0x2000014a

08000fbc <getTemper>:

float getTemper(){
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0

	Ds18b20Delay(100);
 8000fc0:	2064      	movs	r0, #100	@ 0x64
 8000fc2:	f000 fca7 	bl	8001914 <HAL_Delay>
	m_busy =1; //비트를 읽고 있냐 아니냐
 8000fc6:	4b09      	ldr	r3, [pc, #36]	@ (8000fec <getTemper+0x30>)
 8000fc8:	2201      	movs	r2, #1
 8000fca:	701a      	strb	r2, [r3, #0]
	temperSensor.DataIsValid = DS18B20_Read(&OneWire, temperSensor.Address, &temperSensor.Temperature);
 8000fcc:	4a08      	ldr	r2, [pc, #32]	@ (8000ff0 <getTemper+0x34>)
 8000fce:	4909      	ldr	r1, [pc, #36]	@ (8000ff4 <getTemper+0x38>)
 8000fd0:	4809      	ldr	r0, [pc, #36]	@ (8000ff8 <getTemper+0x3c>)
 8000fd2:	f000 f827 	bl	8001024 <DS18B20_Read>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	461a      	mov	r2, r3
 8000fda:	4b06      	ldr	r3, [pc, #24]	@ (8000ff4 <getTemper+0x38>)
 8000fdc:	731a      	strb	r2, [r3, #12]
	m_busy =0;
 8000fde:	4b03      	ldr	r3, [pc, #12]	@ (8000fec <getTemper+0x30>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	701a      	strb	r2, [r3, #0]
	return temperSensor.Temperature;
 8000fe4:	4b03      	ldr	r3, [pc, #12]	@ (8000ff4 <getTemper+0x38>)
 8000fe6:	689b      	ldr	r3, [r3, #8]
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	20000149 	.word	0x20000149
 8000ff0:	2000012c 	.word	0x2000012c
 8000ff4:	20000124 	.word	0x20000124
 8000ff8:	20000134 	.word	0x20000134

08000ffc <DS18B20_StartAll>:
	
	return 1;
}

void DS18B20_StartAll(OneWire_t* OneWire)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
	/* Reset pulse */
	OneWire_Reset(OneWire);
 8001004:	6878      	ldr	r0, [r7, #4]
 8001006:	f000 faaf 	bl	8001568 <OneWire_Reset>
	/* Skip rom */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_SKIPROM);
 800100a:	21cc      	movs	r1, #204	@ 0xcc
 800100c:	6878      	ldr	r0, [r7, #4]
 800100e:	f000 fb6d 	bl	80016ec <OneWire_WriteByte>
	/* Start conversion on all connected devices */
	OneWire_WriteByte(OneWire, DS18B20_CMD_CONVERTTEMP);
 8001012:	2144      	movs	r1, #68	@ 0x44
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	f000 fb69 	bl	80016ec <OneWire_WriteByte>
}
 800101a:	bf00      	nop
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
	...

08001024 <DS18B20_Read>:

bool DS18B20_Read(OneWire_t* OneWire, uint8_t *ROM, float *destination) 
{
 8001024:	b590      	push	{r4, r7, lr}
 8001026:	b08b      	sub	sp, #44	@ 0x2c
 8001028:	af00      	add	r7, sp, #0
 800102a:	60f8      	str	r0, [r7, #12]
 800102c:	60b9      	str	r1, [r7, #8]
 800102e:	607a      	str	r2, [r7, #4]
	uint16_t temperature;
	uint8_t resolution;
	int8_t digit, minus = 0;
 8001030:	2300      	movs	r3, #0
 8001032:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	float decimal;
	uint8_t i = 0;
 8001036:	2300      	movs	r3, #0
 8001038:	77fb      	strb	r3, [r7, #31]
	uint8_t data[9];
	uint8_t crc;
	
	/* Check if device is DS18B20 */
	if (!DS18B20_Is(ROM)) {
 800103a:	68b8      	ldr	r0, [r7, #8]
 800103c:	f000 f96c 	bl	8001318 <DS18B20_Is>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d101      	bne.n	800104a <DS18B20_Read+0x26>
		return false;
 8001046:	2300      	movs	r3, #0
 8001048:	e0d8      	b.n	80011fc <DS18B20_Read+0x1d8>
	}
	
	/* Check if line is released, if it is, then conversion is complete */
	if (!OneWire_ReadBit(OneWire)) 
 800104a:	68f8      	ldr	r0, [r7, #12]
 800104c:	f000 fb10 	bl	8001670 <OneWire_ReadBit>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d101      	bne.n	800105a <DS18B20_Read+0x36>
	{
		/* Conversion is not finished yet */
		return false; 
 8001056:	2300      	movs	r3, #0
 8001058:	e0d0      	b.n	80011fc <DS18B20_Read+0x1d8>
	}

	/* Reset line */
	OneWire_Reset(OneWire);
 800105a:	68f8      	ldr	r0, [r7, #12]
 800105c:	f000 fa84 	bl	8001568 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8001060:	68b9      	ldr	r1, [r7, #8]
 8001062:	68f8      	ldr	r0, [r7, #12]
 8001064:	f000 fb81 	bl	800176a <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 8001068:	21be      	movs	r1, #190	@ 0xbe
 800106a:	68f8      	ldr	r0, [r7, #12]
 800106c:	f000 fb3e 	bl	80016ec <OneWire_WriteByte>
	
	/* Get data */
	for (i = 0; i < 9; i++) 
 8001070:	2300      	movs	r3, #0
 8001072:	77fb      	strb	r3, [r7, #31]
 8001074:	e00d      	b.n	8001092 <DS18B20_Read+0x6e>
	{
		/* Read byte by byte */
		data[i] = OneWire_ReadByte(OneWire);
 8001076:	7ffc      	ldrb	r4, [r7, #31]
 8001078:	68f8      	ldr	r0, [r7, #12]
 800107a:	f000 fb55 	bl	8001728 <OneWire_ReadByte>
 800107e:	4603      	mov	r3, r0
 8001080:	461a      	mov	r2, r3
 8001082:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 8001086:	443b      	add	r3, r7
 8001088:	f803 2c14 	strb.w	r2, [r3, #-20]
	for (i = 0; i < 9; i++) 
 800108c:	7ffb      	ldrb	r3, [r7, #31]
 800108e:	3301      	adds	r3, #1
 8001090:	77fb      	strb	r3, [r7, #31]
 8001092:	7ffb      	ldrb	r3, [r7, #31]
 8001094:	2b08      	cmp	r3, #8
 8001096:	d9ee      	bls.n	8001076 <DS18B20_Read+0x52>
	}
	
	/* Calculate CRC */
	crc = OneWire_CRC8(data, 8);
 8001098:	f107 0314 	add.w	r3, r7, #20
 800109c:	2108      	movs	r1, #8
 800109e:	4618      	mov	r0, r3
 80010a0:	f000 fb9e 	bl	80017e0 <OneWire_CRC8>
 80010a4:	4603      	mov	r3, r0
 80010a6:	77bb      	strb	r3, [r7, #30]
	
	/* Check if CRC is ok */
	if (crc != data[8])
 80010a8:	7f3b      	ldrb	r3, [r7, #28]
 80010aa:	7fba      	ldrb	r2, [r7, #30]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	d001      	beq.n	80010b4 <DS18B20_Read+0x90>
		/* CRC invalid */
		return 0;
 80010b0:	2300      	movs	r3, #0
 80010b2:	e0a3      	b.n	80011fc <DS18B20_Read+0x1d8>

	
	/* First two bytes of scratchpad are temperature values */
	temperature = data[0] | (data[1] << 8);
 80010b4:	7d3b      	ldrb	r3, [r7, #20]
 80010b6:	b21a      	sxth	r2, r3
 80010b8:	7d7b      	ldrb	r3, [r7, #21]
 80010ba:	021b      	lsls	r3, r3, #8
 80010bc:	b21b      	sxth	r3, r3
 80010be:	4313      	orrs	r3, r2
 80010c0:	b21b      	sxth	r3, r3
 80010c2:	84fb      	strh	r3, [r7, #38]	@ 0x26

	/* Reset line */
	OneWire_Reset(OneWire);
 80010c4:	68f8      	ldr	r0, [r7, #12]
 80010c6:	f000 fa4f 	bl	8001568 <OneWire_Reset>
	
	/* Check if temperature is negative */
	if (temperature & 0x8000)
 80010ca:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	da05      	bge.n	80010de <DS18B20_Read+0xba>
	{
		/* Two's complement, temperature is negative */
		temperature = ~temperature + 1;
 80010d2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80010d4:	425b      	negs	r3, r3
 80010d6:	84fb      	strh	r3, [r7, #38]	@ 0x26
		minus = 1;
 80010d8:	2301      	movs	r3, #1
 80010da:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	}

	
	/* Get sensor resolution */
	resolution = ((data[4] & 0x60) >> 5) + 9;
 80010de:	7e3b      	ldrb	r3, [r7, #24]
 80010e0:	115b      	asrs	r3, r3, #5
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	f003 0303 	and.w	r3, r3, #3
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	3309      	adds	r3, #9
 80010ec:	777b      	strb	r3, [r7, #29]

	
	/* Store temperature integer digits and decimal digits */
	digit = temperature >> 4;
 80010ee:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80010f0:	091b      	lsrs	r3, r3, #4
 80010f2:	b29b      	uxth	r3, r3
 80010f4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	digit |= ((temperature >> 8) & 0x7) << 4;
 80010f8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80010fa:	0a1b      	lsrs	r3, r3, #8
 80010fc:	b29b      	uxth	r3, r3
 80010fe:	011b      	lsls	r3, r3, #4
 8001100:	b25b      	sxtb	r3, r3
 8001102:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001106:	b25a      	sxtb	r2, r3
 8001108:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800110c:	4313      	orrs	r3, r2
 800110e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	
	/* Store decimal digits */
	switch (resolution) 
 8001112:	7f7b      	ldrb	r3, [r7, #29]
 8001114:	3b09      	subs	r3, #9
 8001116:	2b03      	cmp	r3, #3
 8001118:	d850      	bhi.n	80011bc <DS18B20_Read+0x198>
 800111a:	a201      	add	r2, pc, #4	@ (adr r2, 8001120 <DS18B20_Read+0xfc>)
 800111c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001120:	08001131 	.word	0x08001131
 8001124:	08001155 	.word	0x08001155
 8001128:	08001179 	.word	0x08001179
 800112c:	0800119d 	.word	0x0800119d
	{
		case 9:
			decimal = (temperature >> 3) & 0x01;
 8001130:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001132:	08db      	lsrs	r3, r3, #3
 8001134:	b29b      	uxth	r3, r3
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff f974 	bl	8000428 <__aeabi_i2f>
 8001140:	4603      	mov	r3, r0
 8001142:	623b      	str	r3, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_9BIT;
 8001144:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8001148:	6a38      	ldr	r0, [r7, #32]
 800114a:	f7fe ffff 	bl	800014c <__aeabi_fmul>
 800114e:	4603      	mov	r3, r0
 8001150:	623b      	str	r3, [r7, #32]
		break;
 8001152:	e038      	b.n	80011c6 <DS18B20_Read+0x1a2>
		case 10:
			decimal = (temperature >> 2) & 0x03;
 8001154:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001156:	089b      	lsrs	r3, r3, #2
 8001158:	b29b      	uxth	r3, r3
 800115a:	f003 0303 	and.w	r3, r3, #3
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff f962 	bl	8000428 <__aeabi_i2f>
 8001164:	4603      	mov	r3, r0
 8001166:	623b      	str	r3, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_10BIT;
 8001168:	f04f 517a 	mov.w	r1, #1048576000	@ 0x3e800000
 800116c:	6a38      	ldr	r0, [r7, #32]
 800116e:	f7fe ffed 	bl	800014c <__aeabi_fmul>
 8001172:	4603      	mov	r3, r0
 8001174:	623b      	str	r3, [r7, #32]
		 break;
 8001176:	e026      	b.n	80011c6 <DS18B20_Read+0x1a2>
		case 11: 
			decimal = (temperature >> 1) & 0x07;
 8001178:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800117a:	085b      	lsrs	r3, r3, #1
 800117c:	b29b      	uxth	r3, r3
 800117e:	f003 0307 	and.w	r3, r3, #7
 8001182:	4618      	mov	r0, r3
 8001184:	f7ff f950 	bl	8000428 <__aeabi_i2f>
 8001188:	4603      	mov	r3, r0
 800118a:	623b      	str	r3, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_11BIT;
 800118c:	f04f 5178 	mov.w	r1, #1040187392	@ 0x3e000000
 8001190:	6a38      	ldr	r0, [r7, #32]
 8001192:	f7fe ffdb 	bl	800014c <__aeabi_fmul>
 8001196:	4603      	mov	r3, r0
 8001198:	623b      	str	r3, [r7, #32]
		break;
 800119a:	e014      	b.n	80011c6 <DS18B20_Read+0x1a2>
		case 12: 
			decimal = temperature & 0x0F;
 800119c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800119e:	f003 030f 	and.w	r3, r3, #15
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff f940 	bl	8000428 <__aeabi_i2f>
 80011a8:	4603      	mov	r3, r0
 80011aa:	623b      	str	r3, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_12BIT;
 80011ac:	f04f 5176 	mov.w	r1, #1031798784	@ 0x3d800000
 80011b0:	6a38      	ldr	r0, [r7, #32]
 80011b2:	f7fe ffcb 	bl	800014c <__aeabi_fmul>
 80011b6:	4603      	mov	r3, r0
 80011b8:	623b      	str	r3, [r7, #32]
		 break;
 80011ba:	e004      	b.n	80011c6 <DS18B20_Read+0x1a2>
		default: 
			decimal = 0xFF;
 80011bc:	4b11      	ldr	r3, [pc, #68]	@ (8001204 <DS18B20_Read+0x1e0>)
 80011be:	623b      	str	r3, [r7, #32]
			digit = 0;
 80011c0:	2300      	movs	r3, #0
 80011c2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	}
	
	/* Check for negative part */
	decimal = digit + decimal;
 80011c6:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 80011ca:	4618      	mov	r0, r3
 80011cc:	f7ff f92c 	bl	8000428 <__aeabi_i2f>
 80011d0:	4603      	mov	r3, r0
 80011d2:	4619      	mov	r1, r3
 80011d4:	6a38      	ldr	r0, [r7, #32]
 80011d6:	f7ff f873 	bl	80002c0 <__addsf3>
 80011da:	4603      	mov	r3, r0
 80011dc:	623b      	str	r3, [r7, #32]
	if (minus) 
 80011de:	f997 3024 	ldrsb.w	r3, [r7, #36]	@ 0x24
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d006      	beq.n	80011f4 <DS18B20_Read+0x1d0>
		decimal = 0 - decimal;
 80011e6:	6a39      	ldr	r1, [r7, #32]
 80011e8:	f04f 0000 	mov.w	r0, #0
 80011ec:	f7ff f866 	bl	80002bc <__aeabi_fsub>
 80011f0:	4603      	mov	r3, r0
 80011f2:	623b      	str	r3, [r7, #32]
	
	
	/* Set to pointer */
	*destination = decimal;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6a3a      	ldr	r2, [r7, #32]
 80011f8:	601a      	str	r2, [r3, #0]
	
	/* Return 1, temperature valid */
	return true;
 80011fa:	2301      	movs	r3, #1
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	372c      	adds	r7, #44	@ 0x2c
 8001200:	46bd      	mov	sp, r7
 8001202:	bd90      	pop	{r4, r7, pc}
 8001204:	437f0000 	.word	0x437f0000

08001208 <DS18B20_SetResolution>:
	/* Return 9 - 12 value according to number of bits */
	return ((conf & 0x60) >> 5) + 9;
}

uint8_t DS18B20_SetResolution(OneWire_t* OneWire, uint8_t *ROM, DS18B20_Resolution_t resolution) 
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b086      	sub	sp, #24
 800120c:	af00      	add	r7, sp, #0
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	60b9      	str	r1, [r7, #8]
 8001212:	4613      	mov	r3, r2
 8001214:	71fb      	strb	r3, [r7, #7]
	uint8_t th, tl, conf;
	if (!DS18B20_Is(ROM)) 
 8001216:	68b8      	ldr	r0, [r7, #8]
 8001218:	f000 f87e 	bl	8001318 <DS18B20_Is>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d101      	bne.n	8001226 <DS18B20_SetResolution+0x1e>
		return 0;
 8001222:	2300      	movs	r3, #0
 8001224:	e074      	b.n	8001310 <DS18B20_SetResolution+0x108>
	
	
	/* Reset line */
	OneWire_Reset(OneWire);
 8001226:	68f8      	ldr	r0, [r7, #12]
 8001228:	f000 f99e 	bl	8001568 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 800122c:	68b9      	ldr	r1, [r7, #8]
 800122e:	68f8      	ldr	r0, [r7, #12]
 8001230:	f000 fa9b 	bl	800176a <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 8001234:	21be      	movs	r1, #190	@ 0xbe
 8001236:	68f8      	ldr	r0, [r7, #12]
 8001238:	f000 fa58 	bl	80016ec <OneWire_WriteByte>
	
	/* Ignore first 2 bytes */
	OneWire_ReadByte(OneWire);
 800123c:	68f8      	ldr	r0, [r7, #12]
 800123e:	f000 fa73 	bl	8001728 <OneWire_ReadByte>
	OneWire_ReadByte(OneWire);
 8001242:	68f8      	ldr	r0, [r7, #12]
 8001244:	f000 fa70 	bl	8001728 <OneWire_ReadByte>
	
	th = OneWire_ReadByte(OneWire);
 8001248:	68f8      	ldr	r0, [r7, #12]
 800124a:	f000 fa6d 	bl	8001728 <OneWire_ReadByte>
 800124e:	4603      	mov	r3, r0
 8001250:	75bb      	strb	r3, [r7, #22]
	tl = OneWire_ReadByte(OneWire);
 8001252:	68f8      	ldr	r0, [r7, #12]
 8001254:	f000 fa68 	bl	8001728 <OneWire_ReadByte>
 8001258:	4603      	mov	r3, r0
 800125a:	757b      	strb	r3, [r7, #21]
	conf = OneWire_ReadByte(OneWire);
 800125c:	68f8      	ldr	r0, [r7, #12]
 800125e:	f000 fa63 	bl	8001728 <OneWire_ReadByte>
 8001262:	4603      	mov	r3, r0
 8001264:	75fb      	strb	r3, [r7, #23]
	
	if (resolution == DS18B20_Resolution_9bits) 
 8001266:	79fb      	ldrb	r3, [r7, #7]
 8001268:	2b09      	cmp	r3, #9
 800126a:	d108      	bne.n	800127e <DS18B20_SetResolution+0x76>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 800126c:	7dfb      	ldrb	r3, [r7, #23]
 800126e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001272:	75fb      	strb	r3, [r7, #23]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8001274:	7dfb      	ldrb	r3, [r7, #23]
 8001276:	f023 0320 	bic.w	r3, r3, #32
 800127a:	75fb      	strb	r3, [r7, #23]
 800127c:	e022      	b.n	80012c4 <DS18B20_SetResolution+0xbc>
	}
	else if (resolution == DS18B20_Resolution_10bits) 
 800127e:	79fb      	ldrb	r3, [r7, #7]
 8001280:	2b0a      	cmp	r3, #10
 8001282:	d108      	bne.n	8001296 <DS18B20_SetResolution+0x8e>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 8001284:	7dfb      	ldrb	r3, [r7, #23]
 8001286:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800128a:	75fb      	strb	r3, [r7, #23]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 800128c:	7dfb      	ldrb	r3, [r7, #23]
 800128e:	f043 0320 	orr.w	r3, r3, #32
 8001292:	75fb      	strb	r3, [r7, #23]
 8001294:	e016      	b.n	80012c4 <DS18B20_SetResolution+0xbc>
	}
	else if (resolution == DS18B20_Resolution_11bits)
 8001296:	79fb      	ldrb	r3, [r7, #7]
 8001298:	2b0b      	cmp	r3, #11
 800129a:	d108      	bne.n	80012ae <DS18B20_SetResolution+0xa6>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 800129c:	7dfb      	ldrb	r3, [r7, #23]
 800129e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80012a2:	75fb      	strb	r3, [r7, #23]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 80012a4:	7dfb      	ldrb	r3, [r7, #23]
 80012a6:	f023 0320 	bic.w	r3, r3, #32
 80012aa:	75fb      	strb	r3, [r7, #23]
 80012ac:	e00a      	b.n	80012c4 <DS18B20_SetResolution+0xbc>
	}
	else if (resolution == DS18B20_Resolution_12bits)
 80012ae:	79fb      	ldrb	r3, [r7, #7]
 80012b0:	2b0c      	cmp	r3, #12
 80012b2:	d107      	bne.n	80012c4 <DS18B20_SetResolution+0xbc>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 80012b4:	7dfb      	ldrb	r3, [r7, #23]
 80012b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80012ba:	75fb      	strb	r3, [r7, #23]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 80012bc:	7dfb      	ldrb	r3, [r7, #23]
 80012be:	f043 0320 	orr.w	r3, r3, #32
 80012c2:	75fb      	strb	r3, [r7, #23]
	}
	
	/* Reset line */
	OneWire_Reset(OneWire);
 80012c4:	68f8      	ldr	r0, [r7, #12]
 80012c6:	f000 f94f 	bl	8001568 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 80012ca:	68b9      	ldr	r1, [r7, #8]
 80012cc:	68f8      	ldr	r0, [r7, #12]
 80012ce:	f000 fa4c 	bl	800176a <OneWire_SelectWithPointer>
	/* Write scratchpad command by onewire protocol, only th, tl and conf register can be written */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_WSCRATCHPAD);
 80012d2:	214e      	movs	r1, #78	@ 0x4e
 80012d4:	68f8      	ldr	r0, [r7, #12]
 80012d6:	f000 fa09 	bl	80016ec <OneWire_WriteByte>
	
	/* Write bytes */
	OneWire_WriteByte(OneWire, th);
 80012da:	7dbb      	ldrb	r3, [r7, #22]
 80012dc:	4619      	mov	r1, r3
 80012de:	68f8      	ldr	r0, [r7, #12]
 80012e0:	f000 fa04 	bl	80016ec <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, tl);
 80012e4:	7d7b      	ldrb	r3, [r7, #21]
 80012e6:	4619      	mov	r1, r3
 80012e8:	68f8      	ldr	r0, [r7, #12]
 80012ea:	f000 f9ff 	bl	80016ec <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, conf);
 80012ee:	7dfb      	ldrb	r3, [r7, #23]
 80012f0:	4619      	mov	r1, r3
 80012f2:	68f8      	ldr	r0, [r7, #12]
 80012f4:	f000 f9fa 	bl	80016ec <OneWire_WriteByte>
	
	/* Reset line */
	OneWire_Reset(OneWire);
 80012f8:	68f8      	ldr	r0, [r7, #12]
 80012fa:	f000 f935 	bl	8001568 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 80012fe:	68b9      	ldr	r1, [r7, #8]
 8001300:	68f8      	ldr	r0, [r7, #12]
 8001302:	f000 fa32 	bl	800176a <OneWire_SelectWithPointer>
	/* Copy scratchpad to EEPROM of DS18B20 */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);
 8001306:	2148      	movs	r1, #72	@ 0x48
 8001308:	68f8      	ldr	r0, [r7, #12]
 800130a:	f000 f9ef 	bl	80016ec <OneWire_WriteByte>
	
	return 1;
 800130e:	2301      	movs	r3, #1
}
 8001310:	4618      	mov	r0, r3
 8001312:	3718      	adds	r7, #24
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}

08001318 <DS18B20_Is>:

uint8_t DS18B20_Is(uint8_t *ROM) 
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
	/* Checks if first byte is equal to DS18B20's family code */
	if (*ROM == DS18B20_FAMILY_CODE) 
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	2b28      	cmp	r3, #40	@ 0x28
 8001326:	d101      	bne.n	800132c <DS18B20_Is+0x14>
		return 1;
 8001328:	2301      	movs	r3, #1
 800132a:	e000      	b.n	800132e <DS18B20_Is+0x16>
	
	return 0;
 800132c:	2300      	movs	r3, #0
}
 800132e:	4618      	mov	r0, r3
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	bc80      	pop	{r7}
 8001336:	4770      	bx	lr

08001338 <DS18B20_DisableAlarmTemperature>:
	
	return 1;
}

uint8_t DS18B20_DisableAlarmTemperature(OneWire_t* OneWire, uint8_t *ROM) 
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	6039      	str	r1, [r7, #0]
	uint8_t tl, th, conf;
	if (!DS18B20_Is(ROM)) 
 8001342:	6838      	ldr	r0, [r7, #0]
 8001344:	f7ff ffe8 	bl	8001318 <DS18B20_Is>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d101      	bne.n	8001352 <DS18B20_DisableAlarmTemperature+0x1a>
		return 0;
 800134e:	2300      	movs	r3, #0
 8001350:	e049      	b.n	80013e6 <DS18B20_DisableAlarmTemperature+0xae>
	
	/* Reset line */
	OneWire_Reset(OneWire);
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f000 f908 	bl	8001568 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8001358:	6839      	ldr	r1, [r7, #0]
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f000 fa05 	bl	800176a <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 8001360:	21be      	movs	r1, #190	@ 0xbe
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f000 f9c2 	bl	80016ec <OneWire_WriteByte>
	
	/* Ignore first 2 bytes */
	OneWire_ReadByte(OneWire);
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f000 f9dd 	bl	8001728 <OneWire_ReadByte>
	OneWire_ReadByte(OneWire);
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f000 f9da 	bl	8001728 <OneWire_ReadByte>
	
	th = OneWire_ReadByte(OneWire);
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f000 f9d7 	bl	8001728 <OneWire_ReadByte>
 800137a:	4603      	mov	r3, r0
 800137c:	73fb      	strb	r3, [r7, #15]
	tl = OneWire_ReadByte(OneWire);
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f000 f9d2 	bl	8001728 <OneWire_ReadByte>
 8001384:	4603      	mov	r3, r0
 8001386:	73bb      	strb	r3, [r7, #14]
	conf = OneWire_ReadByte(OneWire);
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f000 f9cd 	bl	8001728 <OneWire_ReadByte>
 800138e:	4603      	mov	r3, r0
 8001390:	737b      	strb	r3, [r7, #13]
	
	th = 125;
 8001392:	237d      	movs	r3, #125	@ 0x7d
 8001394:	73fb      	strb	r3, [r7, #15]
	tl = (uint8_t)-55;
 8001396:	23c9      	movs	r3, #201	@ 0xc9
 8001398:	73bb      	strb	r3, [r7, #14]

	/* Reset line */
	OneWire_Reset(OneWire);
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f000 f8e4 	bl	8001568 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 80013a0:	6839      	ldr	r1, [r7, #0]
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f000 f9e1 	bl	800176a <OneWire_SelectWithPointer>
	/* Write scratchpad command by onewire protocol, only th, tl and conf register can be written */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_WSCRATCHPAD);
 80013a8:	214e      	movs	r1, #78	@ 0x4e
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	f000 f99e 	bl	80016ec <OneWire_WriteByte>
	
	/* Write bytes */
	OneWire_WriteByte(OneWire, th);
 80013b0:	7bfb      	ldrb	r3, [r7, #15]
 80013b2:	4619      	mov	r1, r3
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	f000 f999 	bl	80016ec <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, tl);
 80013ba:	7bbb      	ldrb	r3, [r7, #14]
 80013bc:	4619      	mov	r1, r3
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f000 f994 	bl	80016ec <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, conf);
 80013c4:	7b7b      	ldrb	r3, [r7, #13]
 80013c6:	4619      	mov	r1, r3
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f000 f98f 	bl	80016ec <OneWire_WriteByte>
	
	/* Reset line */
	OneWire_Reset(OneWire);
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f000 f8ca 	bl	8001568 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 80013d4:	6839      	ldr	r1, [r7, #0]
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f000 f9c7 	bl	800176a <OneWire_SelectWithPointer>
	/* Copy scratchpad to EEPROM of DS18B20 */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);
 80013dc:	2148      	movs	r1, #72	@ 0x48
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f000 f984 	bl	80016ec <OneWire_WriteByte>
	
	return 1;
 80013e4:	2301      	movs	r3, #1
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3710      	adds	r7, #16
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}

080013ee <DS18B20_AllDone>:
	/* Start alarm search */
	return OneWire_Search(OneWire, DS18B20_CMD_ALARMSEARCH);
}

uint8_t DS18B20_AllDone(OneWire_t* OneWire)
{
 80013ee:	b580      	push	{r7, lr}
 80013f0:	b082      	sub	sp, #8
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	6078      	str	r0, [r7, #4]
	/* If read bit is low, then device is not finished yet with calculation temperature */
	return OneWire_ReadBit(OneWire);
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f000 f93a 	bl	8001670 <OneWire_ReadBit>
 80013fc:	4603      	mov	r3, r0
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
	...

08001408 <getCurrentTemper>:

////// jh_08.09

float getCurrentTemper(){
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0

	return temperSensor.Temperature;
 800140c:	4b02      	ldr	r3, [pc, #8]	@ (8001418 <getCurrentTemper+0x10>)
 800140e:	689b      	ldr	r3, [r3, #8]
}
 8001410:	4618      	mov	r0, r3
 8001412:	46bd      	mov	sp, r7
 8001414:	bc80      	pop	{r7}
 8001416:	4770      	bx	lr
 8001418:	20000124 	.word	0x20000124

0800141c <isBusyLine>:
#include "onewire.h"
#include "ds18b20Config.h"
//#include "tim.h"

static uint8_t m_busy_line = 0;
uint8_t isBusyLine(){
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0

	return m_busy_line;
 8001420:	4b02      	ldr	r3, [pc, #8]	@ (800142c <isBusyLine+0x10>)
 8001422:	781b      	ldrb	r3, [r3, #0]
}
 8001424:	4618      	mov	r0, r3
 8001426:	46bd      	mov	sp, r7
 8001428:	bc80      	pop	{r7}
 800142a:	4770      	bx	lr
 800142c:	2000014b 	.word	0x2000014b

08001430 <ONEWIRE_DELAY>:


void ONEWIRE_DELAY(uint16_t time_us)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	4603      	mov	r3, r0
 8001438:	80fb      	strh	r3, [r7, #6]
	_DS18B20_TIMER.Instance->CNT = 0;
 800143a:	4b08      	ldr	r3, [pc, #32]	@ (800145c <ONEWIRE_DELAY+0x2c>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	2200      	movs	r2, #0
 8001440:	625a      	str	r2, [r3, #36]	@ 0x24
	while(_DS18B20_TIMER.Instance->CNT <= time_us);
 8001442:	bf00      	nop
 8001444:	4b05      	ldr	r3, [pc, #20]	@ (800145c <ONEWIRE_DELAY+0x2c>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800144a:	88fb      	ldrh	r3, [r7, #6]
 800144c:	429a      	cmp	r2, r3
 800144e:	d9f9      	bls.n	8001444 <ONEWIRE_DELAY+0x14>
}
 8001450:	bf00      	nop
 8001452:	bf00      	nop
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	bc80      	pop	{r7}
 800145a:	4770      	bx	lr
 800145c:	20000048 	.word	0x20000048

08001460 <ONEWIRE_LOW>:
void ONEWIRE_LOW(OneWire_t *gp)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
	gp->GPIOx->BSRR = gp->GPIO_Pin<<16;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	889b      	ldrh	r3, [r3, #4]
 800146c:	461a      	mov	r2, r3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	0412      	lsls	r2, r2, #16
 8001474:	611a      	str	r2, [r3, #16]
}	
 8001476:	bf00      	nop
 8001478:	370c      	adds	r7, #12
 800147a:	46bd      	mov	sp, r7
 800147c:	bc80      	pop	{r7}
 800147e:	4770      	bx	lr

08001480 <ONEWIRE_HIGH>:
void ONEWIRE_HIGH(OneWire_t *gp)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
	gp->GPIOx->BSRR = gp->GPIO_Pin;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	889a      	ldrh	r2, [r3, #4]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	611a      	str	r2, [r3, #16]
}	
 8001492:	bf00      	nop
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	bc80      	pop	{r7}
 800149a:	4770      	bx	lr

0800149c <ONEWIRE_INPUT>:
void ONEWIRE_INPUT(OneWire_t *gp)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b086      	sub	sp, #24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	gpinit;
	gpinit.Mode = GPIO_MODE_INPUT;
 80014a4:	2300      	movs	r3, #0
 80014a6:	60fb      	str	r3, [r7, #12]
	gpinit.Pull = GPIO_NOPULL;
 80014a8:	2300      	movs	r3, #0
 80014aa:	613b      	str	r3, [r7, #16]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 80014ac:	2303      	movs	r3, #3
 80014ae:	617b      	str	r3, [r7, #20]
	gpinit.Pin = gp->GPIO_Pin;	
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	889b      	ldrh	r3, [r3, #4]
 80014b4:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f107 0208 	add.w	r2, r7, #8
 80014be:	4611      	mov	r1, r2
 80014c0:	4618      	mov	r0, r3
 80014c2:	f000 fb59 	bl	8001b78 <HAL_GPIO_Init>
}	
 80014c6:	bf00      	nop
 80014c8:	3718      	adds	r7, #24
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}

080014ce <ONEWIRE_OUTPUT>:
void ONEWIRE_OUTPUT(OneWire_t *gp)
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b086      	sub	sp, #24
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	gpinit;
	gpinit.Mode = GPIO_MODE_OUTPUT_OD;
 80014d6:	2311      	movs	r3, #17
 80014d8:	60fb      	str	r3, [r7, #12]
	gpinit.Pull = GPIO_NOPULL;
 80014da:	2300      	movs	r3, #0
 80014dc:	613b      	str	r3, [r7, #16]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 80014de:	2303      	movs	r3, #3
 80014e0:	617b      	str	r3, [r7, #20]
	gpinit.Pin = gp->GPIO_Pin;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	889b      	ldrh	r3, [r3, #4]
 80014e6:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f107 0208 	add.w	r2, r7, #8
 80014f0:	4611      	mov	r1, r2
 80014f2:	4618      	mov	r0, r3
 80014f4:	f000 fb40 	bl	8001b78 <HAL_GPIO_Init>

}
 80014f8:	bf00      	nop
 80014fa:	3718      	adds	r7, #24
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}

08001500 <OneWire_Init>:
void OneWire_Init(OneWire_t* OneWireStruct, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) 
{	
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	60f8      	str	r0, [r7, #12]
 8001508:	60b9      	str	r1, [r7, #8]
 800150a:	4613      	mov	r3, r2
 800150c:	80fb      	strh	r3, [r7, #6]
	m_busy_line = 0;
 800150e:	4b14      	ldr	r3, [pc, #80]	@ (8001560 <OneWire_Init+0x60>)
 8001510:	2200      	movs	r2, #0
 8001512:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Start(&_DS18B20_TIMER);
 8001514:	4813      	ldr	r0, [pc, #76]	@ (8001564 <OneWire_Init+0x64>)
 8001516:	f001 f943 	bl	80027a0 <HAL_TIM_Base_Start>

	OneWireStruct->GPIOx = GPIOx;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	68ba      	ldr	r2, [r7, #8]
 800151e:	601a      	str	r2, [r3, #0]
	OneWireStruct->GPIO_Pin = GPIO_Pin;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	88fa      	ldrh	r2, [r7, #6]
 8001524:	809a      	strh	r2, [r3, #4]
	ONEWIRE_OUTPUT(OneWireStruct);
 8001526:	68f8      	ldr	r0, [r7, #12]
 8001528:	f7ff ffd1 	bl	80014ce <ONEWIRE_OUTPUT>
	ONEWIRE_HIGH(OneWireStruct);
 800152c:	68f8      	ldr	r0, [r7, #12]
 800152e:	f7ff ffa7 	bl	8001480 <ONEWIRE_HIGH>
	OneWireDelay(1000);
 8001532:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001536:	f000 f9ed 	bl	8001914 <HAL_Delay>
	ONEWIRE_LOW(OneWireStruct);
 800153a:	68f8      	ldr	r0, [r7, #12]
 800153c:	f7ff ff90 	bl	8001460 <ONEWIRE_LOW>
	OneWireDelay(1000);
 8001540:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001544:	f000 f9e6 	bl	8001914 <HAL_Delay>
	ONEWIRE_HIGH(OneWireStruct);
 8001548:	68f8      	ldr	r0, [r7, #12]
 800154a:	f7ff ff99 	bl	8001480 <ONEWIRE_HIGH>
	OneWireDelay(2000);
 800154e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001552:	f000 f9df 	bl	8001914 <HAL_Delay>
}
 8001556:	bf00      	nop
 8001558:	3710      	adds	r7, #16
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	2000014b 	.word	0x2000014b
 8001564:	20000048 	.word	0x20000048

08001568 <OneWire_Reset>:

inline uint8_t OneWire_Reset(OneWire_t* OneWireStruct)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
	uint8_t i;
	
	/* Line low, and wait 480us */
	ONEWIRE_LOW(OneWireStruct);
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f7ff ff75 	bl	8001460 <ONEWIRE_LOW>
	ONEWIRE_OUTPUT(OneWireStruct);
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f7ff ffa9 	bl	80014ce <ONEWIRE_OUTPUT>
	ONEWIRE_DELAY(480);
 800157c:	f44f 70f0 	mov.w	r0, #480	@ 0x1e0
 8001580:	f7ff ff56 	bl	8001430 <ONEWIRE_DELAY>
	ONEWIRE_DELAY(20);
 8001584:	2014      	movs	r0, #20
 8001586:	f7ff ff53 	bl	8001430 <ONEWIRE_DELAY>

	m_busy_line = 1;
 800158a:	4b0f      	ldr	r3, [pc, #60]	@ (80015c8 <OneWire_Reset+0x60>)
 800158c:	2201      	movs	r2, #1
 800158e:	701a      	strb	r2, [r3, #0]
	/* Release line and wait for 70us */
	ONEWIRE_INPUT(OneWireStruct);
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	f7ff ff83 	bl	800149c <ONEWIRE_INPUT>
	ONEWIRE_DELAY(70);
 8001596:	2046      	movs	r0, #70	@ 0x46
 8001598:	f7ff ff4a 	bl	8001430 <ONEWIRE_DELAY>
	/* Check bit value */
	i = HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	889b      	ldrh	r3, [r3, #4]
 80015a4:	4619      	mov	r1, r3
 80015a6:	4610      	mov	r0, r2
 80015a8:	f000 fc6a 	bl	8001e80 <HAL_GPIO_ReadPin>
 80015ac:	4603      	mov	r3, r0
 80015ae:	73fb      	strb	r3, [r7, #15]
	m_busy_line = 0;
 80015b0:	4b05      	ldr	r3, [pc, #20]	@ (80015c8 <OneWire_Reset+0x60>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	701a      	strb	r2, [r3, #0]
	
	/* Delay for 410 us */
	ONEWIRE_DELAY(410);
 80015b6:	f44f 70cd 	mov.w	r0, #410	@ 0x19a
 80015ba:	f7ff ff39 	bl	8001430 <ONEWIRE_DELAY>
	/* Return value of presence pulse, 0 = OK, 1 = ERROR */
	return i;
 80015be:	7bfb      	ldrb	r3, [r7, #15]
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3710      	adds	r7, #16
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	2000014b 	.word	0x2000014b

080015cc <OneWire_WriteBit>:

inline void OneWire_WriteBit(OneWire_t* OneWireStruct, uint8_t bit)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	460b      	mov	r3, r1
 80015d6:	70fb      	strb	r3, [r7, #3]


	if (bit) 
 80015d8:	78fb      	ldrb	r3, [r7, #3]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d024      	beq.n	8001628 <OneWire_WriteBit+0x5c>
	{
		/* Set line low */
		m_busy_line = 1;
 80015de:	4b23      	ldr	r3, [pc, #140]	@ (800166c <OneWire_WriteBit+0xa0>)
 80015e0:	2201      	movs	r2, #1
 80015e2:	701a      	strb	r2, [r3, #0]
		ONEWIRE_LOW(OneWireStruct);
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f7ff ff3b 	bl	8001460 <ONEWIRE_LOW>
		ONEWIRE_OUTPUT(OneWireStruct);
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f7ff ff6f 	bl	80014ce <ONEWIRE_OUTPUT>
		ONEWIRE_DELAY(10);
 80015f0:	200a      	movs	r0, #10
 80015f2:	f7ff ff1d 	bl	8001430 <ONEWIRE_DELAY>
		m_busy_line = 0;
 80015f6:	4b1d      	ldr	r3, [pc, #116]	@ (800166c <OneWire_WriteBit+0xa0>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	701a      	strb	r2, [r3, #0]


		m_busy_line = 1;
 80015fc:	4b1b      	ldr	r3, [pc, #108]	@ (800166c <OneWire_WriteBit+0xa0>)
 80015fe:	2201      	movs	r2, #1
 8001600:	701a      	strb	r2, [r3, #0]
		/* Bit high */
		ONEWIRE_INPUT(OneWireStruct);
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	f7ff ff4a 	bl	800149c <ONEWIRE_INPUT>
		/* Wait for 55 us and release the line */
		m_busy_line = 0;
 8001608:	4b18      	ldr	r3, [pc, #96]	@ (800166c <OneWire_WriteBit+0xa0>)
 800160a:	2200      	movs	r2, #0
 800160c:	701a      	strb	r2, [r3, #0]

		ONEWIRE_DELAY(55);
 800160e:	2037      	movs	r0, #55	@ 0x37
 8001610:	f7ff ff0e 	bl	8001430 <ONEWIRE_DELAY>
		
		m_busy_line = 1;
 8001614:	4b15      	ldr	r3, [pc, #84]	@ (800166c <OneWire_WriteBit+0xa0>)
 8001616:	2201      	movs	r2, #1
 8001618:	701a      	strb	r2, [r3, #0]
		ONEWIRE_INPUT(OneWireStruct);
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f7ff ff3e 	bl	800149c <ONEWIRE_INPUT>
		m_busy_line = 0;
 8001620:	4b12      	ldr	r3, [pc, #72]	@ (800166c <OneWire_WriteBit+0xa0>)
 8001622:	2200      	movs	r2, #0
 8001624:	701a      	strb	r2, [r3, #0]
		ONEWIRE_INPUT(OneWireStruct);
		m_busy_line = 0;
	}


}
 8001626:	e01d      	b.n	8001664 <OneWire_WriteBit+0x98>
		m_busy_line = 1;
 8001628:	4b10      	ldr	r3, [pc, #64]	@ (800166c <OneWire_WriteBit+0xa0>)
 800162a:	2201      	movs	r2, #1
 800162c:	701a      	strb	r2, [r3, #0]
		ONEWIRE_LOW(OneWireStruct);
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f7ff ff16 	bl	8001460 <ONEWIRE_LOW>
		ONEWIRE_OUTPUT(OneWireStruct);
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	f7ff ff4a 	bl	80014ce <ONEWIRE_OUTPUT>
		m_busy_line = 0;
 800163a:	4b0c      	ldr	r3, [pc, #48]	@ (800166c <OneWire_WriteBit+0xa0>)
 800163c:	2200      	movs	r2, #0
 800163e:	701a      	strb	r2, [r3, #0]
		ONEWIRE_DELAY(65);
 8001640:	2041      	movs	r0, #65	@ 0x41
 8001642:	f7ff fef5 	bl	8001430 <ONEWIRE_DELAY>
		m_busy_line = 1;
 8001646:	4b09      	ldr	r3, [pc, #36]	@ (800166c <OneWire_WriteBit+0xa0>)
 8001648:	2201      	movs	r2, #1
 800164a:	701a      	strb	r2, [r3, #0]
		ONEWIRE_INPUT(OneWireStruct);
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f7ff ff25 	bl	800149c <ONEWIRE_INPUT>
		ONEWIRE_DELAY(5);
 8001652:	2005      	movs	r0, #5
 8001654:	f7ff feec 	bl	8001430 <ONEWIRE_DELAY>
		ONEWIRE_INPUT(OneWireStruct);
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f7ff ff1f 	bl	800149c <ONEWIRE_INPUT>
		m_busy_line = 0;
 800165e:	4b03      	ldr	r3, [pc, #12]	@ (800166c <OneWire_WriteBit+0xa0>)
 8001660:	2200      	movs	r2, #0
 8001662:	701a      	strb	r2, [r3, #0]
}
 8001664:	bf00      	nop
 8001666:	3708      	adds	r7, #8
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	2000014b 	.word	0x2000014b

08001670 <OneWire_ReadBit>:

inline uint8_t OneWire_ReadBit(OneWire_t* OneWireStruct) 
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]

	uint8_t bit = 0;
 8001678:	2300      	movs	r3, #0
 800167a:	73fb      	strb	r3, [r7, #15]
	/* Line low */

	m_busy_line = 1;
 800167c:	4b1a      	ldr	r3, [pc, #104]	@ (80016e8 <OneWire_ReadBit+0x78>)
 800167e:	2201      	movs	r2, #1
 8001680:	701a      	strb	r2, [r3, #0]
	ONEWIRE_LOW(OneWireStruct);
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f7ff feec 	bl	8001460 <ONEWIRE_LOW>
	ONEWIRE_OUTPUT(OneWireStruct);
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f7ff ff20 	bl	80014ce <ONEWIRE_OUTPUT>
	ONEWIRE_DELAY(2);
 800168e:	2002      	movs	r0, #2
 8001690:	f7ff fece 	bl	8001430 <ONEWIRE_DELAY>
	m_busy_line = 0;
 8001694:	4b14      	ldr	r3, [pc, #80]	@ (80016e8 <OneWire_ReadBit+0x78>)
 8001696:	2200      	movs	r2, #0
 8001698:	701a      	strb	r2, [r3, #0]

	m_busy_line = 1;
 800169a:	4b13      	ldr	r3, [pc, #76]	@ (80016e8 <OneWire_ReadBit+0x78>)
 800169c:	2201      	movs	r2, #1
 800169e:	701a      	strb	r2, [r3, #0]
	/* Release line */
	ONEWIRE_INPUT(OneWireStruct);
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f7ff fefb 	bl	800149c <ONEWIRE_INPUT>
	ONEWIRE_DELAY(10);
 80016a6:	200a      	movs	r0, #10
 80016a8:	f7ff fec2 	bl	8001430 <ONEWIRE_DELAY>
	m_busy_line = 0;
 80016ac:	4b0e      	ldr	r3, [pc, #56]	@ (80016e8 <OneWire_ReadBit+0x78>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	701a      	strb	r2, [r3, #0]

	m_busy_line = 1;
 80016b2:	4b0d      	ldr	r3, [pc, #52]	@ (80016e8 <OneWire_ReadBit+0x78>)
 80016b4:	2201      	movs	r2, #1
 80016b6:	701a      	strb	r2, [r3, #0]
	/* Read line value */
	if (HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin)) {
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	889b      	ldrh	r3, [r3, #4]
 80016c0:	4619      	mov	r1, r3
 80016c2:	4610      	mov	r0, r2
 80016c4:	f000 fbdc 	bl	8001e80 <HAL_GPIO_ReadPin>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <OneWire_ReadBit+0x62>
		/* Bit is HIGH */
		bit = 1;
 80016ce:	2301      	movs	r3, #1
 80016d0:	73fb      	strb	r3, [r7, #15]
	}
	
	/* Wait 50us to complete 60us period */
	m_busy_line = 0;
 80016d2:	4b05      	ldr	r3, [pc, #20]	@ (80016e8 <OneWire_ReadBit+0x78>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	701a      	strb	r2, [r3, #0]
	ONEWIRE_DELAY(50);
 80016d8:	2032      	movs	r0, #50	@ 0x32
 80016da:	f7ff fea9 	bl	8001430 <ONEWIRE_DELAY>

	/* Return bit value */
	return bit;
 80016de:	7bfb      	ldrb	r3, [r7, #15]
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3710      	adds	r7, #16
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	2000014b 	.word	0x2000014b

080016ec <OneWire_WriteByte>:

void OneWire_WriteByte(OneWire_t* OneWireStruct, uint8_t byte) {
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	460b      	mov	r3, r1
 80016f6:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 8;
 80016f8:	2308      	movs	r3, #8
 80016fa:	73fb      	strb	r3, [r7, #15]
	/* Write 8 bits */
	while (i--) {
 80016fc:	e00a      	b.n	8001714 <OneWire_WriteByte+0x28>
		/* LSB bit is first */
		OneWire_WriteBit(OneWireStruct, byte & 0x01);
 80016fe:	78fb      	ldrb	r3, [r7, #3]
 8001700:	f003 0301 	and.w	r3, r3, #1
 8001704:	b2db      	uxtb	r3, r3
 8001706:	4619      	mov	r1, r3
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f7ff ff5f 	bl	80015cc <OneWire_WriteBit>
		byte >>= 1;
 800170e:	78fb      	ldrb	r3, [r7, #3]
 8001710:	085b      	lsrs	r3, r3, #1
 8001712:	70fb      	strb	r3, [r7, #3]
	while (i--) {
 8001714:	7bfb      	ldrb	r3, [r7, #15]
 8001716:	1e5a      	subs	r2, r3, #1
 8001718:	73fa      	strb	r2, [r7, #15]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d1ef      	bne.n	80016fe <OneWire_WriteByte+0x12>
	}
}
 800171e:	bf00      	nop
 8001720:	bf00      	nop
 8001722:	3710      	adds	r7, #16
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}

08001728 <OneWire_ReadByte>:

uint8_t OneWire_ReadByte(OneWire_t* OneWireStruct) {
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
	uint8_t i = 8, byte = 0;
 8001730:	2308      	movs	r3, #8
 8001732:	73fb      	strb	r3, [r7, #15]
 8001734:	2300      	movs	r3, #0
 8001736:	73bb      	strb	r3, [r7, #14]
	while (i--) {
 8001738:	e00d      	b.n	8001756 <OneWire_ReadByte+0x2e>
		byte >>= 1;
 800173a:	7bbb      	ldrb	r3, [r7, #14]
 800173c:	085b      	lsrs	r3, r3, #1
 800173e:	73bb      	strb	r3, [r7, #14]
		byte |= (OneWire_ReadBit(OneWireStruct) << 7);
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f7ff ff95 	bl	8001670 <OneWire_ReadBit>
 8001746:	4603      	mov	r3, r0
 8001748:	01db      	lsls	r3, r3, #7
 800174a:	b25a      	sxtb	r2, r3
 800174c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001750:	4313      	orrs	r3, r2
 8001752:	b25b      	sxtb	r3, r3
 8001754:	73bb      	strb	r3, [r7, #14]
	while (i--) {
 8001756:	7bfb      	ldrb	r3, [r7, #15]
 8001758:	1e5a      	subs	r2, r3, #1
 800175a:	73fa      	strb	r2, [r7, #15]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d1ec      	bne.n	800173a <OneWire_ReadByte+0x12>
	}
	
	return byte;
 8001760:	7bbb      	ldrb	r3, [r7, #14]
}
 8001762:	4618      	mov	r0, r3
 8001764:	3710      	adds	r7, #16
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <OneWire_SelectWithPointer>:
	for (i = 0; i < 8; i++) {
		OneWire_WriteByte(OneWireStruct, *(addr + i));
	}
}

void OneWire_SelectWithPointer(OneWire_t* OneWireStruct, uint8_t *ROM) {
 800176a:	b580      	push	{r7, lr}
 800176c:	b084      	sub	sp, #16
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
 8001772:	6039      	str	r1, [r7, #0]
	uint8_t i;
	OneWire_WriteByte(OneWireStruct, ONEWIRE_CMD_MATCHROM);
 8001774:	2155      	movs	r1, #85	@ 0x55
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f7ff ffb8 	bl	80016ec <OneWire_WriteByte>
	
	for (i = 0; i < 8; i++) {
 800177c:	2300      	movs	r3, #0
 800177e:	73fb      	strb	r3, [r7, #15]
 8001780:	e00a      	b.n	8001798 <OneWire_SelectWithPointer+0x2e>
		OneWire_WriteByte(OneWireStruct, *(ROM + i));
 8001782:	7bfb      	ldrb	r3, [r7, #15]
 8001784:	683a      	ldr	r2, [r7, #0]
 8001786:	4413      	add	r3, r2
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	4619      	mov	r1, r3
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	f7ff ffad 	bl	80016ec <OneWire_WriteByte>
	for (i = 0; i < 8; i++) {
 8001792:	7bfb      	ldrb	r3, [r7, #15]
 8001794:	3301      	adds	r3, #1
 8001796:	73fb      	strb	r3, [r7, #15]
 8001798:	7bfb      	ldrb	r3, [r7, #15]
 800179a:	2b07      	cmp	r3, #7
 800179c:	d9f1      	bls.n	8001782 <OneWire_SelectWithPointer+0x18>
	}	
}
 800179e:	bf00      	nop
 80017a0:	bf00      	nop
 80017a2:	3710      	adds	r7, #16
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <OneWire_GetFullROM>:

void OneWire_GetFullROM(OneWire_t* OneWireStruct, uint8_t *firstIndex) {
 80017a8:	b480      	push	{r7}
 80017aa:	b085      	sub	sp, #20
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	6039      	str	r1, [r7, #0]
	uint8_t i;
	for (i = 0; i < 8; i++) {
 80017b2:	2300      	movs	r3, #0
 80017b4:	73fb      	strb	r3, [r7, #15]
 80017b6:	e00a      	b.n	80017ce <OneWire_GetFullROM+0x26>
		*(firstIndex + i) = OneWireStruct->ROM_NO[i];
 80017b8:	7bfa      	ldrb	r2, [r7, #15]
 80017ba:	7bfb      	ldrb	r3, [r7, #15]
 80017bc:	6839      	ldr	r1, [r7, #0]
 80017be:	440b      	add	r3, r1
 80017c0:	6879      	ldr	r1, [r7, #4]
 80017c2:	440a      	add	r2, r1
 80017c4:	7a52      	ldrb	r2, [r2, #9]
 80017c6:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 8; i++) {
 80017c8:	7bfb      	ldrb	r3, [r7, #15]
 80017ca:	3301      	adds	r3, #1
 80017cc:	73fb      	strb	r3, [r7, #15]
 80017ce:	7bfb      	ldrb	r3, [r7, #15]
 80017d0:	2b07      	cmp	r3, #7
 80017d2:	d9f1      	bls.n	80017b8 <OneWire_GetFullROM+0x10>
	}
}
 80017d4:	bf00      	nop
 80017d6:	bf00      	nop
 80017d8:	3714      	adds	r7, #20
 80017da:	46bd      	mov	sp, r7
 80017dc:	bc80      	pop	{r7}
 80017de:	4770      	bx	lr

080017e0 <OneWire_CRC8>:

uint8_t OneWire_CRC8(uint8_t *addr, uint8_t len) {
 80017e0:	b480      	push	{r7}
 80017e2:	b085      	sub	sp, #20
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	460b      	mov	r3, r1
 80017ea:	70fb      	strb	r3, [r7, #3]
	uint8_t crc = 0, inbyte, i, mix;
 80017ec:	2300      	movs	r3, #0
 80017ee:	73fb      	strb	r3, [r7, #15]
	
	while (len--) {
 80017f0:	e022      	b.n	8001838 <OneWire_CRC8+0x58>
		inbyte = *addr++;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	1c5a      	adds	r2, r3, #1
 80017f6:	607a      	str	r2, [r7, #4]
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	73bb      	strb	r3, [r7, #14]
		for (i = 8; i; i--) {
 80017fc:	2308      	movs	r3, #8
 80017fe:	737b      	strb	r3, [r7, #13]
 8001800:	e017      	b.n	8001832 <OneWire_CRC8+0x52>
			mix = (crc ^ inbyte) & 0x01;
 8001802:	7bfa      	ldrb	r2, [r7, #15]
 8001804:	7bbb      	ldrb	r3, [r7, #14]
 8001806:	4053      	eors	r3, r2
 8001808:	b2db      	uxtb	r3, r3
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	733b      	strb	r3, [r7, #12]
			crc >>= 1;
 8001810:	7bfb      	ldrb	r3, [r7, #15]
 8001812:	085b      	lsrs	r3, r3, #1
 8001814:	73fb      	strb	r3, [r7, #15]
			if (mix) {
 8001816:	7b3b      	ldrb	r3, [r7, #12]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d004      	beq.n	8001826 <OneWire_CRC8+0x46>
				crc ^= 0x8C;
 800181c:	7bfb      	ldrb	r3, [r7, #15]
 800181e:	f083 0373 	eor.w	r3, r3, #115	@ 0x73
 8001822:	43db      	mvns	r3, r3
 8001824:	73fb      	strb	r3, [r7, #15]
			}
			inbyte >>= 1;
 8001826:	7bbb      	ldrb	r3, [r7, #14]
 8001828:	085b      	lsrs	r3, r3, #1
 800182a:	73bb      	strb	r3, [r7, #14]
		for (i = 8; i; i--) {
 800182c:	7b7b      	ldrb	r3, [r7, #13]
 800182e:	3b01      	subs	r3, #1
 8001830:	737b      	strb	r3, [r7, #13]
 8001832:	7b7b      	ldrb	r3, [r7, #13]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d1e4      	bne.n	8001802 <OneWire_CRC8+0x22>
	while (len--) {
 8001838:	78fb      	ldrb	r3, [r7, #3]
 800183a:	1e5a      	subs	r2, r3, #1
 800183c:	70fa      	strb	r2, [r7, #3]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d1d7      	bne.n	80017f2 <OneWire_CRC8+0x12>
		}
	}
	
	/* Return calculated CRC */
	return crc;
 8001842:	7bfb      	ldrb	r3, [r7, #15]
}
 8001844:	4618      	mov	r0, r3
 8001846:	3714      	adds	r7, #20
 8001848:	46bd      	mov	sp, r7
 800184a:	bc80      	pop	{r7}
 800184c:	4770      	bx	lr
	...

08001850 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001854:	4b08      	ldr	r3, [pc, #32]	@ (8001878 <HAL_Init+0x28>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a07      	ldr	r2, [pc, #28]	@ (8001878 <HAL_Init+0x28>)
 800185a:	f043 0310 	orr.w	r3, r3, #16
 800185e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001860:	2003      	movs	r0, #3
 8001862:	f000 f947 	bl	8001af4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001866:	200f      	movs	r0, #15
 8001868:	f000 f808 	bl	800187c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800186c:	f7ff f9ca 	bl	8000c04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001870:	2300      	movs	r3, #0
}
 8001872:	4618      	mov	r0, r3
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	40022000 	.word	0x40022000

0800187c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001884:	4b12      	ldr	r3, [pc, #72]	@ (80018d0 <HAL_InitTick+0x54>)
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	4b12      	ldr	r3, [pc, #72]	@ (80018d4 <HAL_InitTick+0x58>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	4619      	mov	r1, r3
 800188e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001892:	fbb3 f3f1 	udiv	r3, r3, r1
 8001896:	fbb2 f3f3 	udiv	r3, r2, r3
 800189a:	4618      	mov	r0, r3
 800189c:	f000 f95f 	bl	8001b5e <HAL_SYSTICK_Config>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e00e      	b.n	80018c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2b0f      	cmp	r3, #15
 80018ae:	d80a      	bhi.n	80018c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018b0:	2200      	movs	r2, #0
 80018b2:	6879      	ldr	r1, [r7, #4]
 80018b4:	f04f 30ff 	mov.w	r0, #4294967295
 80018b8:	f000 f927 	bl	8001b0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018bc:	4a06      	ldr	r2, [pc, #24]	@ (80018d8 <HAL_InitTick+0x5c>)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018c2:	2300      	movs	r3, #0
 80018c4:	e000      	b.n	80018c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3708      	adds	r7, #8
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	20000000 	.word	0x20000000
 80018d4:	20000008 	.word	0x20000008
 80018d8:	20000004 	.word	0x20000004

080018dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018e0:	4b05      	ldr	r3, [pc, #20]	@ (80018f8 <HAL_IncTick+0x1c>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	461a      	mov	r2, r3
 80018e6:	4b05      	ldr	r3, [pc, #20]	@ (80018fc <HAL_IncTick+0x20>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4413      	add	r3, r2
 80018ec:	4a03      	ldr	r2, [pc, #12]	@ (80018fc <HAL_IncTick+0x20>)
 80018ee:	6013      	str	r3, [r2, #0]
}
 80018f0:	bf00      	nop
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bc80      	pop	{r7}
 80018f6:	4770      	bx	lr
 80018f8:	20000008 	.word	0x20000008
 80018fc:	2000014c 	.word	0x2000014c

08001900 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  return uwTick;
 8001904:	4b02      	ldr	r3, [pc, #8]	@ (8001910 <HAL_GetTick+0x10>)
 8001906:	681b      	ldr	r3, [r3, #0]
}
 8001908:	4618      	mov	r0, r3
 800190a:	46bd      	mov	sp, r7
 800190c:	bc80      	pop	{r7}
 800190e:	4770      	bx	lr
 8001910:	2000014c 	.word	0x2000014c

08001914 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800191c:	f7ff fff0 	bl	8001900 <HAL_GetTick>
 8001920:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800192c:	d005      	beq.n	800193a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800192e:	4b0a      	ldr	r3, [pc, #40]	@ (8001958 <HAL_Delay+0x44>)
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	461a      	mov	r2, r3
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	4413      	add	r3, r2
 8001938:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800193a:	bf00      	nop
 800193c:	f7ff ffe0 	bl	8001900 <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	68bb      	ldr	r3, [r7, #8]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	68fa      	ldr	r2, [r7, #12]
 8001948:	429a      	cmp	r2, r3
 800194a:	d8f7      	bhi.n	800193c <HAL_Delay+0x28>
  {
  }
}
 800194c:	bf00      	nop
 800194e:	bf00      	nop
 8001950:	3710      	adds	r7, #16
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	20000008 	.word	0x20000008

0800195c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800195c:	b480      	push	{r7}
 800195e:	b085      	sub	sp, #20
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f003 0307 	and.w	r3, r3, #7
 800196a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800196c:	4b0c      	ldr	r3, [pc, #48]	@ (80019a0 <__NVIC_SetPriorityGrouping+0x44>)
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001972:	68ba      	ldr	r2, [r7, #8]
 8001974:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001978:	4013      	ands	r3, r2
 800197a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001984:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001988:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800198c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800198e:	4a04      	ldr	r2, [pc, #16]	@ (80019a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	60d3      	str	r3, [r2, #12]
}
 8001994:	bf00      	nop
 8001996:	3714      	adds	r7, #20
 8001998:	46bd      	mov	sp, r7
 800199a:	bc80      	pop	{r7}
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	e000ed00 	.word	0xe000ed00

080019a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019a8:	4b04      	ldr	r3, [pc, #16]	@ (80019bc <__NVIC_GetPriorityGrouping+0x18>)
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	0a1b      	lsrs	r3, r3, #8
 80019ae:	f003 0307 	and.w	r3, r3, #7
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bc80      	pop	{r7}
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	e000ed00 	.word	0xe000ed00

080019c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	4603      	mov	r3, r0
 80019c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	db0b      	blt.n	80019ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019d2:	79fb      	ldrb	r3, [r7, #7]
 80019d4:	f003 021f 	and.w	r2, r3, #31
 80019d8:	4906      	ldr	r1, [pc, #24]	@ (80019f4 <__NVIC_EnableIRQ+0x34>)
 80019da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019de:	095b      	lsrs	r3, r3, #5
 80019e0:	2001      	movs	r0, #1
 80019e2:	fa00 f202 	lsl.w	r2, r0, r2
 80019e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019ea:	bf00      	nop
 80019ec:	370c      	adds	r7, #12
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bc80      	pop	{r7}
 80019f2:	4770      	bx	lr
 80019f4:	e000e100 	.word	0xe000e100

080019f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	4603      	mov	r3, r0
 8001a00:	6039      	str	r1, [r7, #0]
 8001a02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	db0a      	blt.n	8001a22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	b2da      	uxtb	r2, r3
 8001a10:	490c      	ldr	r1, [pc, #48]	@ (8001a44 <__NVIC_SetPriority+0x4c>)
 8001a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a16:	0112      	lsls	r2, r2, #4
 8001a18:	b2d2      	uxtb	r2, r2
 8001a1a:	440b      	add	r3, r1
 8001a1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a20:	e00a      	b.n	8001a38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	b2da      	uxtb	r2, r3
 8001a26:	4908      	ldr	r1, [pc, #32]	@ (8001a48 <__NVIC_SetPriority+0x50>)
 8001a28:	79fb      	ldrb	r3, [r7, #7]
 8001a2a:	f003 030f 	and.w	r3, r3, #15
 8001a2e:	3b04      	subs	r3, #4
 8001a30:	0112      	lsls	r2, r2, #4
 8001a32:	b2d2      	uxtb	r2, r2
 8001a34:	440b      	add	r3, r1
 8001a36:	761a      	strb	r2, [r3, #24]
}
 8001a38:	bf00      	nop
 8001a3a:	370c      	adds	r7, #12
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bc80      	pop	{r7}
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	e000e100 	.word	0xe000e100
 8001a48:	e000ed00 	.word	0xe000ed00

08001a4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b089      	sub	sp, #36	@ 0x24
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	60f8      	str	r0, [r7, #12]
 8001a54:	60b9      	str	r1, [r7, #8]
 8001a56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	f003 0307 	and.w	r3, r3, #7
 8001a5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	f1c3 0307 	rsb	r3, r3, #7
 8001a66:	2b04      	cmp	r3, #4
 8001a68:	bf28      	it	cs
 8001a6a:	2304      	movcs	r3, #4
 8001a6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	3304      	adds	r3, #4
 8001a72:	2b06      	cmp	r3, #6
 8001a74:	d902      	bls.n	8001a7c <NVIC_EncodePriority+0x30>
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	3b03      	subs	r3, #3
 8001a7a:	e000      	b.n	8001a7e <NVIC_EncodePriority+0x32>
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a80:	f04f 32ff 	mov.w	r2, #4294967295
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8a:	43da      	mvns	r2, r3
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	401a      	ands	r2, r3
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a94:	f04f 31ff 	mov.w	r1, #4294967295
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a9e:	43d9      	mvns	r1, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aa4:	4313      	orrs	r3, r2
         );
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3724      	adds	r7, #36	@ 0x24
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bc80      	pop	{r7}
 8001aae:	4770      	bx	lr

08001ab0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	3b01      	subs	r3, #1
 8001abc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ac0:	d301      	bcc.n	8001ac6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e00f      	b.n	8001ae6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ac6:	4a0a      	ldr	r2, [pc, #40]	@ (8001af0 <SysTick_Config+0x40>)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	3b01      	subs	r3, #1
 8001acc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ace:	210f      	movs	r1, #15
 8001ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ad4:	f7ff ff90 	bl	80019f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ad8:	4b05      	ldr	r3, [pc, #20]	@ (8001af0 <SysTick_Config+0x40>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ade:	4b04      	ldr	r3, [pc, #16]	@ (8001af0 <SysTick_Config+0x40>)
 8001ae0:	2207      	movs	r2, #7
 8001ae2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ae4:	2300      	movs	r3, #0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	e000e010 	.word	0xe000e010

08001af4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f7ff ff2d 	bl	800195c <__NVIC_SetPriorityGrouping>
}
 8001b02:	bf00      	nop
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b086      	sub	sp, #24
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	4603      	mov	r3, r0
 8001b12:	60b9      	str	r1, [r7, #8]
 8001b14:	607a      	str	r2, [r7, #4]
 8001b16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b1c:	f7ff ff42 	bl	80019a4 <__NVIC_GetPriorityGrouping>
 8001b20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	68b9      	ldr	r1, [r7, #8]
 8001b26:	6978      	ldr	r0, [r7, #20]
 8001b28:	f7ff ff90 	bl	8001a4c <NVIC_EncodePriority>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b32:	4611      	mov	r1, r2
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7ff ff5f 	bl	80019f8 <__NVIC_SetPriority>
}
 8001b3a:	bf00      	nop
 8001b3c:	3718      	adds	r7, #24
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b42:	b580      	push	{r7, lr}
 8001b44:	b082      	sub	sp, #8
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	4603      	mov	r3, r0
 8001b4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7ff ff35 	bl	80019c0 <__NVIC_EnableIRQ>
}
 8001b56:	bf00      	nop
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b5e:	b580      	push	{r7, lr}
 8001b60:	b082      	sub	sp, #8
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f7ff ffa2 	bl	8001ab0 <SysTick_Config>
 8001b6c:	4603      	mov	r3, r0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
	...

08001b78 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b08b      	sub	sp, #44	@ 0x2c
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b82:	2300      	movs	r3, #0
 8001b84:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b86:	2300      	movs	r3, #0
 8001b88:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b8a:	e169      	b.n	8001e60 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	69fa      	ldr	r2, [r7, #28]
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	429a      	cmp	r2, r3
 8001ba6:	f040 8158 	bne.w	8001e5a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	4a9a      	ldr	r2, [pc, #616]	@ (8001e18 <HAL_GPIO_Init+0x2a0>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d05e      	beq.n	8001c72 <HAL_GPIO_Init+0xfa>
 8001bb4:	4a98      	ldr	r2, [pc, #608]	@ (8001e18 <HAL_GPIO_Init+0x2a0>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d875      	bhi.n	8001ca6 <HAL_GPIO_Init+0x12e>
 8001bba:	4a98      	ldr	r2, [pc, #608]	@ (8001e1c <HAL_GPIO_Init+0x2a4>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d058      	beq.n	8001c72 <HAL_GPIO_Init+0xfa>
 8001bc0:	4a96      	ldr	r2, [pc, #600]	@ (8001e1c <HAL_GPIO_Init+0x2a4>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d86f      	bhi.n	8001ca6 <HAL_GPIO_Init+0x12e>
 8001bc6:	4a96      	ldr	r2, [pc, #600]	@ (8001e20 <HAL_GPIO_Init+0x2a8>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d052      	beq.n	8001c72 <HAL_GPIO_Init+0xfa>
 8001bcc:	4a94      	ldr	r2, [pc, #592]	@ (8001e20 <HAL_GPIO_Init+0x2a8>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d869      	bhi.n	8001ca6 <HAL_GPIO_Init+0x12e>
 8001bd2:	4a94      	ldr	r2, [pc, #592]	@ (8001e24 <HAL_GPIO_Init+0x2ac>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d04c      	beq.n	8001c72 <HAL_GPIO_Init+0xfa>
 8001bd8:	4a92      	ldr	r2, [pc, #584]	@ (8001e24 <HAL_GPIO_Init+0x2ac>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d863      	bhi.n	8001ca6 <HAL_GPIO_Init+0x12e>
 8001bde:	4a92      	ldr	r2, [pc, #584]	@ (8001e28 <HAL_GPIO_Init+0x2b0>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d046      	beq.n	8001c72 <HAL_GPIO_Init+0xfa>
 8001be4:	4a90      	ldr	r2, [pc, #576]	@ (8001e28 <HAL_GPIO_Init+0x2b0>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d85d      	bhi.n	8001ca6 <HAL_GPIO_Init+0x12e>
 8001bea:	2b12      	cmp	r3, #18
 8001bec:	d82a      	bhi.n	8001c44 <HAL_GPIO_Init+0xcc>
 8001bee:	2b12      	cmp	r3, #18
 8001bf0:	d859      	bhi.n	8001ca6 <HAL_GPIO_Init+0x12e>
 8001bf2:	a201      	add	r2, pc, #4	@ (adr r2, 8001bf8 <HAL_GPIO_Init+0x80>)
 8001bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bf8:	08001c73 	.word	0x08001c73
 8001bfc:	08001c4d 	.word	0x08001c4d
 8001c00:	08001c5f 	.word	0x08001c5f
 8001c04:	08001ca1 	.word	0x08001ca1
 8001c08:	08001ca7 	.word	0x08001ca7
 8001c0c:	08001ca7 	.word	0x08001ca7
 8001c10:	08001ca7 	.word	0x08001ca7
 8001c14:	08001ca7 	.word	0x08001ca7
 8001c18:	08001ca7 	.word	0x08001ca7
 8001c1c:	08001ca7 	.word	0x08001ca7
 8001c20:	08001ca7 	.word	0x08001ca7
 8001c24:	08001ca7 	.word	0x08001ca7
 8001c28:	08001ca7 	.word	0x08001ca7
 8001c2c:	08001ca7 	.word	0x08001ca7
 8001c30:	08001ca7 	.word	0x08001ca7
 8001c34:	08001ca7 	.word	0x08001ca7
 8001c38:	08001ca7 	.word	0x08001ca7
 8001c3c:	08001c55 	.word	0x08001c55
 8001c40:	08001c69 	.word	0x08001c69
 8001c44:	4a79      	ldr	r2, [pc, #484]	@ (8001e2c <HAL_GPIO_Init+0x2b4>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d013      	beq.n	8001c72 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c4a:	e02c      	b.n	8001ca6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	623b      	str	r3, [r7, #32]
          break;
 8001c52:	e029      	b.n	8001ca8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	3304      	adds	r3, #4
 8001c5a:	623b      	str	r3, [r7, #32]
          break;
 8001c5c:	e024      	b.n	8001ca8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	68db      	ldr	r3, [r3, #12]
 8001c62:	3308      	adds	r3, #8
 8001c64:	623b      	str	r3, [r7, #32]
          break;
 8001c66:	e01f      	b.n	8001ca8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	330c      	adds	r3, #12
 8001c6e:	623b      	str	r3, [r7, #32]
          break;
 8001c70:	e01a      	b.n	8001ca8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d102      	bne.n	8001c80 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c7a:	2304      	movs	r3, #4
 8001c7c:	623b      	str	r3, [r7, #32]
          break;
 8001c7e:	e013      	b.n	8001ca8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d105      	bne.n	8001c94 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c88:	2308      	movs	r3, #8
 8001c8a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	69fa      	ldr	r2, [r7, #28]
 8001c90:	611a      	str	r2, [r3, #16]
          break;
 8001c92:	e009      	b.n	8001ca8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c94:	2308      	movs	r3, #8
 8001c96:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	69fa      	ldr	r2, [r7, #28]
 8001c9c:	615a      	str	r2, [r3, #20]
          break;
 8001c9e:	e003      	b.n	8001ca8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	623b      	str	r3, [r7, #32]
          break;
 8001ca4:	e000      	b.n	8001ca8 <HAL_GPIO_Init+0x130>
          break;
 8001ca6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	2bff      	cmp	r3, #255	@ 0xff
 8001cac:	d801      	bhi.n	8001cb2 <HAL_GPIO_Init+0x13a>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	e001      	b.n	8001cb6 <HAL_GPIO_Init+0x13e>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	3304      	adds	r3, #4
 8001cb6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	2bff      	cmp	r3, #255	@ 0xff
 8001cbc:	d802      	bhi.n	8001cc4 <HAL_GPIO_Init+0x14c>
 8001cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	e002      	b.n	8001cca <HAL_GPIO_Init+0x152>
 8001cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cc6:	3b08      	subs	r3, #8
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	210f      	movs	r1, #15
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd8:	43db      	mvns	r3, r3
 8001cda:	401a      	ands	r2, r3
 8001cdc:	6a39      	ldr	r1, [r7, #32]
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce4:	431a      	orrs	r2, r3
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	f000 80b1 	beq.w	8001e5a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001cf8:	4b4d      	ldr	r3, [pc, #308]	@ (8001e30 <HAL_GPIO_Init+0x2b8>)
 8001cfa:	699b      	ldr	r3, [r3, #24]
 8001cfc:	4a4c      	ldr	r2, [pc, #304]	@ (8001e30 <HAL_GPIO_Init+0x2b8>)
 8001cfe:	f043 0301 	orr.w	r3, r3, #1
 8001d02:	6193      	str	r3, [r2, #24]
 8001d04:	4b4a      	ldr	r3, [pc, #296]	@ (8001e30 <HAL_GPIO_Init+0x2b8>)
 8001d06:	699b      	ldr	r3, [r3, #24]
 8001d08:	f003 0301 	and.w	r3, r3, #1
 8001d0c:	60bb      	str	r3, [r7, #8]
 8001d0e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d10:	4a48      	ldr	r2, [pc, #288]	@ (8001e34 <HAL_GPIO_Init+0x2bc>)
 8001d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d14:	089b      	lsrs	r3, r3, #2
 8001d16:	3302      	adds	r3, #2
 8001d18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d1c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d20:	f003 0303 	and.w	r3, r3, #3
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	220f      	movs	r2, #15
 8001d28:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2c:	43db      	mvns	r3, r3
 8001d2e:	68fa      	ldr	r2, [r7, #12]
 8001d30:	4013      	ands	r3, r2
 8001d32:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	4a40      	ldr	r2, [pc, #256]	@ (8001e38 <HAL_GPIO_Init+0x2c0>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d013      	beq.n	8001d64 <HAL_GPIO_Init+0x1ec>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	4a3f      	ldr	r2, [pc, #252]	@ (8001e3c <HAL_GPIO_Init+0x2c4>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d00d      	beq.n	8001d60 <HAL_GPIO_Init+0x1e8>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	4a3e      	ldr	r2, [pc, #248]	@ (8001e40 <HAL_GPIO_Init+0x2c8>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d007      	beq.n	8001d5c <HAL_GPIO_Init+0x1e4>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	4a3d      	ldr	r2, [pc, #244]	@ (8001e44 <HAL_GPIO_Init+0x2cc>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d101      	bne.n	8001d58 <HAL_GPIO_Init+0x1e0>
 8001d54:	2303      	movs	r3, #3
 8001d56:	e006      	b.n	8001d66 <HAL_GPIO_Init+0x1ee>
 8001d58:	2304      	movs	r3, #4
 8001d5a:	e004      	b.n	8001d66 <HAL_GPIO_Init+0x1ee>
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	e002      	b.n	8001d66 <HAL_GPIO_Init+0x1ee>
 8001d60:	2301      	movs	r3, #1
 8001d62:	e000      	b.n	8001d66 <HAL_GPIO_Init+0x1ee>
 8001d64:	2300      	movs	r3, #0
 8001d66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d68:	f002 0203 	and.w	r2, r2, #3
 8001d6c:	0092      	lsls	r2, r2, #2
 8001d6e:	4093      	lsls	r3, r2
 8001d70:	68fa      	ldr	r2, [r7, #12]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d76:	492f      	ldr	r1, [pc, #188]	@ (8001e34 <HAL_GPIO_Init+0x2bc>)
 8001d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d7a:	089b      	lsrs	r3, r3, #2
 8001d7c:	3302      	adds	r3, #2
 8001d7e:	68fa      	ldr	r2, [r7, #12]
 8001d80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d006      	beq.n	8001d9e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d90:	4b2d      	ldr	r3, [pc, #180]	@ (8001e48 <HAL_GPIO_Init+0x2d0>)
 8001d92:	689a      	ldr	r2, [r3, #8]
 8001d94:	492c      	ldr	r1, [pc, #176]	@ (8001e48 <HAL_GPIO_Init+0x2d0>)
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	608b      	str	r3, [r1, #8]
 8001d9c:	e006      	b.n	8001dac <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d9e:	4b2a      	ldr	r3, [pc, #168]	@ (8001e48 <HAL_GPIO_Init+0x2d0>)
 8001da0:	689a      	ldr	r2, [r3, #8]
 8001da2:	69bb      	ldr	r3, [r7, #24]
 8001da4:	43db      	mvns	r3, r3
 8001da6:	4928      	ldr	r1, [pc, #160]	@ (8001e48 <HAL_GPIO_Init+0x2d0>)
 8001da8:	4013      	ands	r3, r2
 8001daa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d006      	beq.n	8001dc6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001db8:	4b23      	ldr	r3, [pc, #140]	@ (8001e48 <HAL_GPIO_Init+0x2d0>)
 8001dba:	68da      	ldr	r2, [r3, #12]
 8001dbc:	4922      	ldr	r1, [pc, #136]	@ (8001e48 <HAL_GPIO_Init+0x2d0>)
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	60cb      	str	r3, [r1, #12]
 8001dc4:	e006      	b.n	8001dd4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001dc6:	4b20      	ldr	r3, [pc, #128]	@ (8001e48 <HAL_GPIO_Init+0x2d0>)
 8001dc8:	68da      	ldr	r2, [r3, #12]
 8001dca:	69bb      	ldr	r3, [r7, #24]
 8001dcc:	43db      	mvns	r3, r3
 8001dce:	491e      	ldr	r1, [pc, #120]	@ (8001e48 <HAL_GPIO_Init+0x2d0>)
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d006      	beq.n	8001dee <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001de0:	4b19      	ldr	r3, [pc, #100]	@ (8001e48 <HAL_GPIO_Init+0x2d0>)
 8001de2:	685a      	ldr	r2, [r3, #4]
 8001de4:	4918      	ldr	r1, [pc, #96]	@ (8001e48 <HAL_GPIO_Init+0x2d0>)
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	604b      	str	r3, [r1, #4]
 8001dec:	e006      	b.n	8001dfc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001dee:	4b16      	ldr	r3, [pc, #88]	@ (8001e48 <HAL_GPIO_Init+0x2d0>)
 8001df0:	685a      	ldr	r2, [r3, #4]
 8001df2:	69bb      	ldr	r3, [r7, #24]
 8001df4:	43db      	mvns	r3, r3
 8001df6:	4914      	ldr	r1, [pc, #80]	@ (8001e48 <HAL_GPIO_Init+0x2d0>)
 8001df8:	4013      	ands	r3, r2
 8001dfa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d021      	beq.n	8001e4c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e08:	4b0f      	ldr	r3, [pc, #60]	@ (8001e48 <HAL_GPIO_Init+0x2d0>)
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	490e      	ldr	r1, [pc, #56]	@ (8001e48 <HAL_GPIO_Init+0x2d0>)
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	600b      	str	r3, [r1, #0]
 8001e14:	e021      	b.n	8001e5a <HAL_GPIO_Init+0x2e2>
 8001e16:	bf00      	nop
 8001e18:	10320000 	.word	0x10320000
 8001e1c:	10310000 	.word	0x10310000
 8001e20:	10220000 	.word	0x10220000
 8001e24:	10210000 	.word	0x10210000
 8001e28:	10120000 	.word	0x10120000
 8001e2c:	10110000 	.word	0x10110000
 8001e30:	40021000 	.word	0x40021000
 8001e34:	40010000 	.word	0x40010000
 8001e38:	40010800 	.word	0x40010800
 8001e3c:	40010c00 	.word	0x40010c00
 8001e40:	40011000 	.word	0x40011000
 8001e44:	40011400 	.word	0x40011400
 8001e48:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e4c:	4b0b      	ldr	r3, [pc, #44]	@ (8001e7c <HAL_GPIO_Init+0x304>)
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	43db      	mvns	r3, r3
 8001e54:	4909      	ldr	r1, [pc, #36]	@ (8001e7c <HAL_GPIO_Init+0x304>)
 8001e56:	4013      	ands	r3, r2
 8001e58:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e66:	fa22 f303 	lsr.w	r3, r2, r3
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	f47f ae8e 	bne.w	8001b8c <HAL_GPIO_Init+0x14>
  }
}
 8001e70:	bf00      	nop
 8001e72:	bf00      	nop
 8001e74:	372c      	adds	r7, #44	@ 0x2c
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bc80      	pop	{r7}
 8001e7a:	4770      	bx	lr
 8001e7c:	40010400 	.word	0x40010400

08001e80 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b085      	sub	sp, #20
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	460b      	mov	r3, r1
 8001e8a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	689a      	ldr	r2, [r3, #8]
 8001e90:	887b      	ldrh	r3, [r7, #2]
 8001e92:	4013      	ands	r3, r2
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d002      	beq.n	8001e9e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	73fb      	strb	r3, [r7, #15]
 8001e9c:	e001      	b.n	8001ea2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ea2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3714      	adds	r7, #20
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bc80      	pop	{r7}
 8001eac:	4770      	bx	lr

08001eae <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001eae:	b480      	push	{r7}
 8001eb0:	b083      	sub	sp, #12
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
 8001eb6:	460b      	mov	r3, r1
 8001eb8:	807b      	strh	r3, [r7, #2]
 8001eba:	4613      	mov	r3, r2
 8001ebc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ebe:	787b      	ldrb	r3, [r7, #1]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d003      	beq.n	8001ecc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ec4:	887a      	ldrh	r2, [r7, #2]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001eca:	e003      	b.n	8001ed4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ecc:	887b      	ldrh	r3, [r7, #2]
 8001ece:	041a      	lsls	r2, r3, #16
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	611a      	str	r2, [r3, #16]
}
 8001ed4:	bf00      	nop
 8001ed6:	370c      	adds	r7, #12
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bc80      	pop	{r7}
 8001edc:	4770      	bx	lr
	...

08001ee0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b086      	sub	sp, #24
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d101      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e272      	b.n	80023d8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0301 	and.w	r3, r3, #1
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	f000 8087 	beq.w	800200e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f00:	4b92      	ldr	r3, [pc, #584]	@ (800214c <HAL_RCC_OscConfig+0x26c>)
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f003 030c 	and.w	r3, r3, #12
 8001f08:	2b04      	cmp	r3, #4
 8001f0a:	d00c      	beq.n	8001f26 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f0c:	4b8f      	ldr	r3, [pc, #572]	@ (800214c <HAL_RCC_OscConfig+0x26c>)
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f003 030c 	and.w	r3, r3, #12
 8001f14:	2b08      	cmp	r3, #8
 8001f16:	d112      	bne.n	8001f3e <HAL_RCC_OscConfig+0x5e>
 8001f18:	4b8c      	ldr	r3, [pc, #560]	@ (800214c <HAL_RCC_OscConfig+0x26c>)
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f24:	d10b      	bne.n	8001f3e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f26:	4b89      	ldr	r3, [pc, #548]	@ (800214c <HAL_RCC_OscConfig+0x26c>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d06c      	beq.n	800200c <HAL_RCC_OscConfig+0x12c>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d168      	bne.n	800200c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e24c      	b.n	80023d8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f46:	d106      	bne.n	8001f56 <HAL_RCC_OscConfig+0x76>
 8001f48:	4b80      	ldr	r3, [pc, #512]	@ (800214c <HAL_RCC_OscConfig+0x26c>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a7f      	ldr	r2, [pc, #508]	@ (800214c <HAL_RCC_OscConfig+0x26c>)
 8001f4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f52:	6013      	str	r3, [r2, #0]
 8001f54:	e02e      	b.n	8001fb4 <HAL_RCC_OscConfig+0xd4>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d10c      	bne.n	8001f78 <HAL_RCC_OscConfig+0x98>
 8001f5e:	4b7b      	ldr	r3, [pc, #492]	@ (800214c <HAL_RCC_OscConfig+0x26c>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a7a      	ldr	r2, [pc, #488]	@ (800214c <HAL_RCC_OscConfig+0x26c>)
 8001f64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f68:	6013      	str	r3, [r2, #0]
 8001f6a:	4b78      	ldr	r3, [pc, #480]	@ (800214c <HAL_RCC_OscConfig+0x26c>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a77      	ldr	r2, [pc, #476]	@ (800214c <HAL_RCC_OscConfig+0x26c>)
 8001f70:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f74:	6013      	str	r3, [r2, #0]
 8001f76:	e01d      	b.n	8001fb4 <HAL_RCC_OscConfig+0xd4>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f80:	d10c      	bne.n	8001f9c <HAL_RCC_OscConfig+0xbc>
 8001f82:	4b72      	ldr	r3, [pc, #456]	@ (800214c <HAL_RCC_OscConfig+0x26c>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a71      	ldr	r2, [pc, #452]	@ (800214c <HAL_RCC_OscConfig+0x26c>)
 8001f88:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f8c:	6013      	str	r3, [r2, #0]
 8001f8e:	4b6f      	ldr	r3, [pc, #444]	@ (800214c <HAL_RCC_OscConfig+0x26c>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a6e      	ldr	r2, [pc, #440]	@ (800214c <HAL_RCC_OscConfig+0x26c>)
 8001f94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f98:	6013      	str	r3, [r2, #0]
 8001f9a:	e00b      	b.n	8001fb4 <HAL_RCC_OscConfig+0xd4>
 8001f9c:	4b6b      	ldr	r3, [pc, #428]	@ (800214c <HAL_RCC_OscConfig+0x26c>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a6a      	ldr	r2, [pc, #424]	@ (800214c <HAL_RCC_OscConfig+0x26c>)
 8001fa2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fa6:	6013      	str	r3, [r2, #0]
 8001fa8:	4b68      	ldr	r3, [pc, #416]	@ (800214c <HAL_RCC_OscConfig+0x26c>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a67      	ldr	r2, [pc, #412]	@ (800214c <HAL_RCC_OscConfig+0x26c>)
 8001fae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001fb2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d013      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fbc:	f7ff fca0 	bl	8001900 <HAL_GetTick>
 8001fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fc2:	e008      	b.n	8001fd6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fc4:	f7ff fc9c 	bl	8001900 <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	2b64      	cmp	r3, #100	@ 0x64
 8001fd0:	d901      	bls.n	8001fd6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e200      	b.n	80023d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fd6:	4b5d      	ldr	r3, [pc, #372]	@ (800214c <HAL_RCC_OscConfig+0x26c>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d0f0      	beq.n	8001fc4 <HAL_RCC_OscConfig+0xe4>
 8001fe2:	e014      	b.n	800200e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe4:	f7ff fc8c 	bl	8001900 <HAL_GetTick>
 8001fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fea:	e008      	b.n	8001ffe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fec:	f7ff fc88 	bl	8001900 <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	2b64      	cmp	r3, #100	@ 0x64
 8001ff8:	d901      	bls.n	8001ffe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e1ec      	b.n	80023d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ffe:	4b53      	ldr	r3, [pc, #332]	@ (800214c <HAL_RCC_OscConfig+0x26c>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d1f0      	bne.n	8001fec <HAL_RCC_OscConfig+0x10c>
 800200a:	e000      	b.n	800200e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800200c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0302 	and.w	r3, r3, #2
 8002016:	2b00      	cmp	r3, #0
 8002018:	d063      	beq.n	80020e2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800201a:	4b4c      	ldr	r3, [pc, #304]	@ (800214c <HAL_RCC_OscConfig+0x26c>)
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f003 030c 	and.w	r3, r3, #12
 8002022:	2b00      	cmp	r3, #0
 8002024:	d00b      	beq.n	800203e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002026:	4b49      	ldr	r3, [pc, #292]	@ (800214c <HAL_RCC_OscConfig+0x26c>)
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f003 030c 	and.w	r3, r3, #12
 800202e:	2b08      	cmp	r3, #8
 8002030:	d11c      	bne.n	800206c <HAL_RCC_OscConfig+0x18c>
 8002032:	4b46      	ldr	r3, [pc, #280]	@ (800214c <HAL_RCC_OscConfig+0x26c>)
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d116      	bne.n	800206c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800203e:	4b43      	ldr	r3, [pc, #268]	@ (800214c <HAL_RCC_OscConfig+0x26c>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0302 	and.w	r3, r3, #2
 8002046:	2b00      	cmp	r3, #0
 8002048:	d005      	beq.n	8002056 <HAL_RCC_OscConfig+0x176>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	691b      	ldr	r3, [r3, #16]
 800204e:	2b01      	cmp	r3, #1
 8002050:	d001      	beq.n	8002056 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e1c0      	b.n	80023d8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002056:	4b3d      	ldr	r3, [pc, #244]	@ (800214c <HAL_RCC_OscConfig+0x26c>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	695b      	ldr	r3, [r3, #20]
 8002062:	00db      	lsls	r3, r3, #3
 8002064:	4939      	ldr	r1, [pc, #228]	@ (800214c <HAL_RCC_OscConfig+0x26c>)
 8002066:	4313      	orrs	r3, r2
 8002068:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800206a:	e03a      	b.n	80020e2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	691b      	ldr	r3, [r3, #16]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d020      	beq.n	80020b6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002074:	4b36      	ldr	r3, [pc, #216]	@ (8002150 <HAL_RCC_OscConfig+0x270>)
 8002076:	2201      	movs	r2, #1
 8002078:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800207a:	f7ff fc41 	bl	8001900 <HAL_GetTick>
 800207e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002080:	e008      	b.n	8002094 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002082:	f7ff fc3d 	bl	8001900 <HAL_GetTick>
 8002086:	4602      	mov	r2, r0
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	2b02      	cmp	r3, #2
 800208e:	d901      	bls.n	8002094 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002090:	2303      	movs	r3, #3
 8002092:	e1a1      	b.n	80023d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002094:	4b2d      	ldr	r3, [pc, #180]	@ (800214c <HAL_RCC_OscConfig+0x26c>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0302 	and.w	r3, r3, #2
 800209c:	2b00      	cmp	r3, #0
 800209e:	d0f0      	beq.n	8002082 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020a0:	4b2a      	ldr	r3, [pc, #168]	@ (800214c <HAL_RCC_OscConfig+0x26c>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	695b      	ldr	r3, [r3, #20]
 80020ac:	00db      	lsls	r3, r3, #3
 80020ae:	4927      	ldr	r1, [pc, #156]	@ (800214c <HAL_RCC_OscConfig+0x26c>)
 80020b0:	4313      	orrs	r3, r2
 80020b2:	600b      	str	r3, [r1, #0]
 80020b4:	e015      	b.n	80020e2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020b6:	4b26      	ldr	r3, [pc, #152]	@ (8002150 <HAL_RCC_OscConfig+0x270>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020bc:	f7ff fc20 	bl	8001900 <HAL_GetTick>
 80020c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020c2:	e008      	b.n	80020d6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020c4:	f7ff fc1c 	bl	8001900 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d901      	bls.n	80020d6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e180      	b.n	80023d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020d6:	4b1d      	ldr	r3, [pc, #116]	@ (800214c <HAL_RCC_OscConfig+0x26c>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0302 	and.w	r3, r3, #2
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d1f0      	bne.n	80020c4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0308 	and.w	r3, r3, #8
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d03a      	beq.n	8002164 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	699b      	ldr	r3, [r3, #24]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d019      	beq.n	800212a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020f6:	4b17      	ldr	r3, [pc, #92]	@ (8002154 <HAL_RCC_OscConfig+0x274>)
 80020f8:	2201      	movs	r2, #1
 80020fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020fc:	f7ff fc00 	bl	8001900 <HAL_GetTick>
 8002100:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002102:	e008      	b.n	8002116 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002104:	f7ff fbfc 	bl	8001900 <HAL_GetTick>
 8002108:	4602      	mov	r2, r0
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	1ad3      	subs	r3, r2, r3
 800210e:	2b02      	cmp	r3, #2
 8002110:	d901      	bls.n	8002116 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e160      	b.n	80023d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002116:	4b0d      	ldr	r3, [pc, #52]	@ (800214c <HAL_RCC_OscConfig+0x26c>)
 8002118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800211a:	f003 0302 	and.w	r3, r3, #2
 800211e:	2b00      	cmp	r3, #0
 8002120:	d0f0      	beq.n	8002104 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002122:	2001      	movs	r0, #1
 8002124:	f000 face 	bl	80026c4 <RCC_Delay>
 8002128:	e01c      	b.n	8002164 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800212a:	4b0a      	ldr	r3, [pc, #40]	@ (8002154 <HAL_RCC_OscConfig+0x274>)
 800212c:	2200      	movs	r2, #0
 800212e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002130:	f7ff fbe6 	bl	8001900 <HAL_GetTick>
 8002134:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002136:	e00f      	b.n	8002158 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002138:	f7ff fbe2 	bl	8001900 <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	2b02      	cmp	r3, #2
 8002144:	d908      	bls.n	8002158 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	e146      	b.n	80023d8 <HAL_RCC_OscConfig+0x4f8>
 800214a:	bf00      	nop
 800214c:	40021000 	.word	0x40021000
 8002150:	42420000 	.word	0x42420000
 8002154:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002158:	4b92      	ldr	r3, [pc, #584]	@ (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 800215a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800215c:	f003 0302 	and.w	r3, r3, #2
 8002160:	2b00      	cmp	r3, #0
 8002162:	d1e9      	bne.n	8002138 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0304 	and.w	r3, r3, #4
 800216c:	2b00      	cmp	r3, #0
 800216e:	f000 80a6 	beq.w	80022be <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002172:	2300      	movs	r3, #0
 8002174:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002176:	4b8b      	ldr	r3, [pc, #556]	@ (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 8002178:	69db      	ldr	r3, [r3, #28]
 800217a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d10d      	bne.n	800219e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002182:	4b88      	ldr	r3, [pc, #544]	@ (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 8002184:	69db      	ldr	r3, [r3, #28]
 8002186:	4a87      	ldr	r2, [pc, #540]	@ (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 8002188:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800218c:	61d3      	str	r3, [r2, #28]
 800218e:	4b85      	ldr	r3, [pc, #532]	@ (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 8002190:	69db      	ldr	r3, [r3, #28]
 8002192:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002196:	60bb      	str	r3, [r7, #8]
 8002198:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800219a:	2301      	movs	r3, #1
 800219c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800219e:	4b82      	ldr	r3, [pc, #520]	@ (80023a8 <HAL_RCC_OscConfig+0x4c8>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d118      	bne.n	80021dc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021aa:	4b7f      	ldr	r3, [pc, #508]	@ (80023a8 <HAL_RCC_OscConfig+0x4c8>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a7e      	ldr	r2, [pc, #504]	@ (80023a8 <HAL_RCC_OscConfig+0x4c8>)
 80021b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021b6:	f7ff fba3 	bl	8001900 <HAL_GetTick>
 80021ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021bc:	e008      	b.n	80021d0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021be:	f7ff fb9f 	bl	8001900 <HAL_GetTick>
 80021c2:	4602      	mov	r2, r0
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	2b64      	cmp	r3, #100	@ 0x64
 80021ca:	d901      	bls.n	80021d0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80021cc:	2303      	movs	r3, #3
 80021ce:	e103      	b.n	80023d8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021d0:	4b75      	ldr	r3, [pc, #468]	@ (80023a8 <HAL_RCC_OscConfig+0x4c8>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d0f0      	beq.n	80021be <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d106      	bne.n	80021f2 <HAL_RCC_OscConfig+0x312>
 80021e4:	4b6f      	ldr	r3, [pc, #444]	@ (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 80021e6:	6a1b      	ldr	r3, [r3, #32]
 80021e8:	4a6e      	ldr	r2, [pc, #440]	@ (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 80021ea:	f043 0301 	orr.w	r3, r3, #1
 80021ee:	6213      	str	r3, [r2, #32]
 80021f0:	e02d      	b.n	800224e <HAL_RCC_OscConfig+0x36e>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	68db      	ldr	r3, [r3, #12]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d10c      	bne.n	8002214 <HAL_RCC_OscConfig+0x334>
 80021fa:	4b6a      	ldr	r3, [pc, #424]	@ (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 80021fc:	6a1b      	ldr	r3, [r3, #32]
 80021fe:	4a69      	ldr	r2, [pc, #420]	@ (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 8002200:	f023 0301 	bic.w	r3, r3, #1
 8002204:	6213      	str	r3, [r2, #32]
 8002206:	4b67      	ldr	r3, [pc, #412]	@ (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 8002208:	6a1b      	ldr	r3, [r3, #32]
 800220a:	4a66      	ldr	r2, [pc, #408]	@ (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 800220c:	f023 0304 	bic.w	r3, r3, #4
 8002210:	6213      	str	r3, [r2, #32]
 8002212:	e01c      	b.n	800224e <HAL_RCC_OscConfig+0x36e>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	68db      	ldr	r3, [r3, #12]
 8002218:	2b05      	cmp	r3, #5
 800221a:	d10c      	bne.n	8002236 <HAL_RCC_OscConfig+0x356>
 800221c:	4b61      	ldr	r3, [pc, #388]	@ (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 800221e:	6a1b      	ldr	r3, [r3, #32]
 8002220:	4a60      	ldr	r2, [pc, #384]	@ (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 8002222:	f043 0304 	orr.w	r3, r3, #4
 8002226:	6213      	str	r3, [r2, #32]
 8002228:	4b5e      	ldr	r3, [pc, #376]	@ (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 800222a:	6a1b      	ldr	r3, [r3, #32]
 800222c:	4a5d      	ldr	r2, [pc, #372]	@ (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 800222e:	f043 0301 	orr.w	r3, r3, #1
 8002232:	6213      	str	r3, [r2, #32]
 8002234:	e00b      	b.n	800224e <HAL_RCC_OscConfig+0x36e>
 8002236:	4b5b      	ldr	r3, [pc, #364]	@ (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 8002238:	6a1b      	ldr	r3, [r3, #32]
 800223a:	4a5a      	ldr	r2, [pc, #360]	@ (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 800223c:	f023 0301 	bic.w	r3, r3, #1
 8002240:	6213      	str	r3, [r2, #32]
 8002242:	4b58      	ldr	r3, [pc, #352]	@ (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 8002244:	6a1b      	ldr	r3, [r3, #32]
 8002246:	4a57      	ldr	r2, [pc, #348]	@ (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 8002248:	f023 0304 	bic.w	r3, r3, #4
 800224c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	68db      	ldr	r3, [r3, #12]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d015      	beq.n	8002282 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002256:	f7ff fb53 	bl	8001900 <HAL_GetTick>
 800225a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800225c:	e00a      	b.n	8002274 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800225e:	f7ff fb4f 	bl	8001900 <HAL_GetTick>
 8002262:	4602      	mov	r2, r0
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	f241 3288 	movw	r2, #5000	@ 0x1388
 800226c:	4293      	cmp	r3, r2
 800226e:	d901      	bls.n	8002274 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002270:	2303      	movs	r3, #3
 8002272:	e0b1      	b.n	80023d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002274:	4b4b      	ldr	r3, [pc, #300]	@ (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 8002276:	6a1b      	ldr	r3, [r3, #32]
 8002278:	f003 0302 	and.w	r3, r3, #2
 800227c:	2b00      	cmp	r3, #0
 800227e:	d0ee      	beq.n	800225e <HAL_RCC_OscConfig+0x37e>
 8002280:	e014      	b.n	80022ac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002282:	f7ff fb3d 	bl	8001900 <HAL_GetTick>
 8002286:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002288:	e00a      	b.n	80022a0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800228a:	f7ff fb39 	bl	8001900 <HAL_GetTick>
 800228e:	4602      	mov	r2, r0
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002298:	4293      	cmp	r3, r2
 800229a:	d901      	bls.n	80022a0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	e09b      	b.n	80023d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022a0:	4b40      	ldr	r3, [pc, #256]	@ (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 80022a2:	6a1b      	ldr	r3, [r3, #32]
 80022a4:	f003 0302 	and.w	r3, r3, #2
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d1ee      	bne.n	800228a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80022ac:	7dfb      	ldrb	r3, [r7, #23]
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d105      	bne.n	80022be <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022b2:	4b3c      	ldr	r3, [pc, #240]	@ (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 80022b4:	69db      	ldr	r3, [r3, #28]
 80022b6:	4a3b      	ldr	r2, [pc, #236]	@ (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 80022b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022bc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	69db      	ldr	r3, [r3, #28]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	f000 8087 	beq.w	80023d6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022c8:	4b36      	ldr	r3, [pc, #216]	@ (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f003 030c 	and.w	r3, r3, #12
 80022d0:	2b08      	cmp	r3, #8
 80022d2:	d061      	beq.n	8002398 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	69db      	ldr	r3, [r3, #28]
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d146      	bne.n	800236a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022dc:	4b33      	ldr	r3, [pc, #204]	@ (80023ac <HAL_RCC_OscConfig+0x4cc>)
 80022de:	2200      	movs	r2, #0
 80022e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e2:	f7ff fb0d 	bl	8001900 <HAL_GetTick>
 80022e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022e8:	e008      	b.n	80022fc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022ea:	f7ff fb09 	bl	8001900 <HAL_GetTick>
 80022ee:	4602      	mov	r2, r0
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	2b02      	cmp	r3, #2
 80022f6:	d901      	bls.n	80022fc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80022f8:	2303      	movs	r3, #3
 80022fa:	e06d      	b.n	80023d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022fc:	4b29      	ldr	r3, [pc, #164]	@ (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d1f0      	bne.n	80022ea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6a1b      	ldr	r3, [r3, #32]
 800230c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002310:	d108      	bne.n	8002324 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002312:	4b24      	ldr	r3, [pc, #144]	@ (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	4921      	ldr	r1, [pc, #132]	@ (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 8002320:	4313      	orrs	r3, r2
 8002322:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002324:	4b1f      	ldr	r3, [pc, #124]	@ (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6a19      	ldr	r1, [r3, #32]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002334:	430b      	orrs	r3, r1
 8002336:	491b      	ldr	r1, [pc, #108]	@ (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 8002338:	4313      	orrs	r3, r2
 800233a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800233c:	4b1b      	ldr	r3, [pc, #108]	@ (80023ac <HAL_RCC_OscConfig+0x4cc>)
 800233e:	2201      	movs	r2, #1
 8002340:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002342:	f7ff fadd 	bl	8001900 <HAL_GetTick>
 8002346:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002348:	e008      	b.n	800235c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800234a:	f7ff fad9 	bl	8001900 <HAL_GetTick>
 800234e:	4602      	mov	r2, r0
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	2b02      	cmp	r3, #2
 8002356:	d901      	bls.n	800235c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	e03d      	b.n	80023d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800235c:	4b11      	ldr	r3, [pc, #68]	@ (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d0f0      	beq.n	800234a <HAL_RCC_OscConfig+0x46a>
 8002368:	e035      	b.n	80023d6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800236a:	4b10      	ldr	r3, [pc, #64]	@ (80023ac <HAL_RCC_OscConfig+0x4cc>)
 800236c:	2200      	movs	r2, #0
 800236e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002370:	f7ff fac6 	bl	8001900 <HAL_GetTick>
 8002374:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002376:	e008      	b.n	800238a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002378:	f7ff fac2 	bl	8001900 <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	2b02      	cmp	r3, #2
 8002384:	d901      	bls.n	800238a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e026      	b.n	80023d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800238a:	4b06      	ldr	r3, [pc, #24]	@ (80023a4 <HAL_RCC_OscConfig+0x4c4>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d1f0      	bne.n	8002378 <HAL_RCC_OscConfig+0x498>
 8002396:	e01e      	b.n	80023d6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	69db      	ldr	r3, [r3, #28]
 800239c:	2b01      	cmp	r3, #1
 800239e:	d107      	bne.n	80023b0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e019      	b.n	80023d8 <HAL_RCC_OscConfig+0x4f8>
 80023a4:	40021000 	.word	0x40021000
 80023a8:	40007000 	.word	0x40007000
 80023ac:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80023b0:	4b0b      	ldr	r3, [pc, #44]	@ (80023e0 <HAL_RCC_OscConfig+0x500>)
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6a1b      	ldr	r3, [r3, #32]
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d106      	bne.n	80023d2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d001      	beq.n	80023d6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e000      	b.n	80023d8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80023d6:	2300      	movs	r3, #0
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3718      	adds	r7, #24
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	40021000 	.word	0x40021000

080023e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d101      	bne.n	80023f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e0d0      	b.n	800259a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023f8:	4b6a      	ldr	r3, [pc, #424]	@ (80025a4 <HAL_RCC_ClockConfig+0x1c0>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0307 	and.w	r3, r3, #7
 8002400:	683a      	ldr	r2, [r7, #0]
 8002402:	429a      	cmp	r2, r3
 8002404:	d910      	bls.n	8002428 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002406:	4b67      	ldr	r3, [pc, #412]	@ (80025a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f023 0207 	bic.w	r2, r3, #7
 800240e:	4965      	ldr	r1, [pc, #404]	@ (80025a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	4313      	orrs	r3, r2
 8002414:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002416:	4b63      	ldr	r3, [pc, #396]	@ (80025a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0307 	and.w	r3, r3, #7
 800241e:	683a      	ldr	r2, [r7, #0]
 8002420:	429a      	cmp	r2, r3
 8002422:	d001      	beq.n	8002428 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e0b8      	b.n	800259a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0302 	and.w	r3, r3, #2
 8002430:	2b00      	cmp	r3, #0
 8002432:	d020      	beq.n	8002476 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0304 	and.w	r3, r3, #4
 800243c:	2b00      	cmp	r3, #0
 800243e:	d005      	beq.n	800244c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002440:	4b59      	ldr	r3, [pc, #356]	@ (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	4a58      	ldr	r2, [pc, #352]	@ (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002446:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800244a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0308 	and.w	r3, r3, #8
 8002454:	2b00      	cmp	r3, #0
 8002456:	d005      	beq.n	8002464 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002458:	4b53      	ldr	r3, [pc, #332]	@ (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	4a52      	ldr	r2, [pc, #328]	@ (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 800245e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002462:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002464:	4b50      	ldr	r3, [pc, #320]	@ (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	494d      	ldr	r1, [pc, #308]	@ (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002472:	4313      	orrs	r3, r2
 8002474:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	2b00      	cmp	r3, #0
 8002480:	d040      	beq.n	8002504 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	2b01      	cmp	r3, #1
 8002488:	d107      	bne.n	800249a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800248a:	4b47      	ldr	r3, [pc, #284]	@ (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d115      	bne.n	80024c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e07f      	b.n	800259a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d107      	bne.n	80024b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024a2:	4b41      	ldr	r3, [pc, #260]	@ (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d109      	bne.n	80024c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e073      	b.n	800259a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024b2:	4b3d      	ldr	r3, [pc, #244]	@ (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0302 	and.w	r3, r3, #2
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d101      	bne.n	80024c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e06b      	b.n	800259a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024c2:	4b39      	ldr	r3, [pc, #228]	@ (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f023 0203 	bic.w	r2, r3, #3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	4936      	ldr	r1, [pc, #216]	@ (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 80024d0:	4313      	orrs	r3, r2
 80024d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024d4:	f7ff fa14 	bl	8001900 <HAL_GetTick>
 80024d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024da:	e00a      	b.n	80024f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024dc:	f7ff fa10 	bl	8001900 <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e053      	b.n	800259a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024f2:	4b2d      	ldr	r3, [pc, #180]	@ (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f003 020c 	and.w	r2, r3, #12
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	429a      	cmp	r2, r3
 8002502:	d1eb      	bne.n	80024dc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002504:	4b27      	ldr	r3, [pc, #156]	@ (80025a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0307 	and.w	r3, r3, #7
 800250c:	683a      	ldr	r2, [r7, #0]
 800250e:	429a      	cmp	r2, r3
 8002510:	d210      	bcs.n	8002534 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002512:	4b24      	ldr	r3, [pc, #144]	@ (80025a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f023 0207 	bic.w	r2, r3, #7
 800251a:	4922      	ldr	r1, [pc, #136]	@ (80025a4 <HAL_RCC_ClockConfig+0x1c0>)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	4313      	orrs	r3, r2
 8002520:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002522:	4b20      	ldr	r3, [pc, #128]	@ (80025a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0307 	and.w	r3, r3, #7
 800252a:	683a      	ldr	r2, [r7, #0]
 800252c:	429a      	cmp	r2, r3
 800252e:	d001      	beq.n	8002534 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e032      	b.n	800259a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0304 	and.w	r3, r3, #4
 800253c:	2b00      	cmp	r3, #0
 800253e:	d008      	beq.n	8002552 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002540:	4b19      	ldr	r3, [pc, #100]	@ (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	4916      	ldr	r1, [pc, #88]	@ (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 800254e:	4313      	orrs	r3, r2
 8002550:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0308 	and.w	r3, r3, #8
 800255a:	2b00      	cmp	r3, #0
 800255c:	d009      	beq.n	8002572 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800255e:	4b12      	ldr	r3, [pc, #72]	@ (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	691b      	ldr	r3, [r3, #16]
 800256a:	00db      	lsls	r3, r3, #3
 800256c:	490e      	ldr	r1, [pc, #56]	@ (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 800256e:	4313      	orrs	r3, r2
 8002570:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002572:	f000 f821 	bl	80025b8 <HAL_RCC_GetSysClockFreq>
 8002576:	4602      	mov	r2, r0
 8002578:	4b0b      	ldr	r3, [pc, #44]	@ (80025a8 <HAL_RCC_ClockConfig+0x1c4>)
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	091b      	lsrs	r3, r3, #4
 800257e:	f003 030f 	and.w	r3, r3, #15
 8002582:	490a      	ldr	r1, [pc, #40]	@ (80025ac <HAL_RCC_ClockConfig+0x1c8>)
 8002584:	5ccb      	ldrb	r3, [r1, r3]
 8002586:	fa22 f303 	lsr.w	r3, r2, r3
 800258a:	4a09      	ldr	r2, [pc, #36]	@ (80025b0 <HAL_RCC_ClockConfig+0x1cc>)
 800258c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800258e:	4b09      	ldr	r3, [pc, #36]	@ (80025b4 <HAL_RCC_ClockConfig+0x1d0>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4618      	mov	r0, r3
 8002594:	f7ff f972 	bl	800187c <HAL_InitTick>

  return HAL_OK;
 8002598:	2300      	movs	r3, #0
}
 800259a:	4618      	mov	r0, r3
 800259c:	3710      	adds	r7, #16
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	40022000 	.word	0x40022000
 80025a8:	40021000 	.word	0x40021000
 80025ac:	080031cc 	.word	0x080031cc
 80025b0:	20000000 	.word	0x20000000
 80025b4:	20000004 	.word	0x20000004

080025b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b087      	sub	sp, #28
 80025bc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80025be:	2300      	movs	r3, #0
 80025c0:	60fb      	str	r3, [r7, #12]
 80025c2:	2300      	movs	r3, #0
 80025c4:	60bb      	str	r3, [r7, #8]
 80025c6:	2300      	movs	r3, #0
 80025c8:	617b      	str	r3, [r7, #20]
 80025ca:	2300      	movs	r3, #0
 80025cc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80025ce:	2300      	movs	r3, #0
 80025d0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80025d2:	4b1e      	ldr	r3, [pc, #120]	@ (800264c <HAL_RCC_GetSysClockFreq+0x94>)
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f003 030c 	and.w	r3, r3, #12
 80025de:	2b04      	cmp	r3, #4
 80025e0:	d002      	beq.n	80025e8 <HAL_RCC_GetSysClockFreq+0x30>
 80025e2:	2b08      	cmp	r3, #8
 80025e4:	d003      	beq.n	80025ee <HAL_RCC_GetSysClockFreq+0x36>
 80025e6:	e027      	b.n	8002638 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025e8:	4b19      	ldr	r3, [pc, #100]	@ (8002650 <HAL_RCC_GetSysClockFreq+0x98>)
 80025ea:	613b      	str	r3, [r7, #16]
      break;
 80025ec:	e027      	b.n	800263e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	0c9b      	lsrs	r3, r3, #18
 80025f2:	f003 030f 	and.w	r3, r3, #15
 80025f6:	4a17      	ldr	r2, [pc, #92]	@ (8002654 <HAL_RCC_GetSysClockFreq+0x9c>)
 80025f8:	5cd3      	ldrb	r3, [r2, r3]
 80025fa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d010      	beq.n	8002628 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002606:	4b11      	ldr	r3, [pc, #68]	@ (800264c <HAL_RCC_GetSysClockFreq+0x94>)
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	0c5b      	lsrs	r3, r3, #17
 800260c:	f003 0301 	and.w	r3, r3, #1
 8002610:	4a11      	ldr	r2, [pc, #68]	@ (8002658 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002612:	5cd3      	ldrb	r3, [r2, r3]
 8002614:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a0d      	ldr	r2, [pc, #52]	@ (8002650 <HAL_RCC_GetSysClockFreq+0x98>)
 800261a:	fb03 f202 	mul.w	r2, r3, r2
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	fbb2 f3f3 	udiv	r3, r2, r3
 8002624:	617b      	str	r3, [r7, #20]
 8002626:	e004      	b.n	8002632 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	4a0c      	ldr	r2, [pc, #48]	@ (800265c <HAL_RCC_GetSysClockFreq+0xa4>)
 800262c:	fb02 f303 	mul.w	r3, r2, r3
 8002630:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	613b      	str	r3, [r7, #16]
      break;
 8002636:	e002      	b.n	800263e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002638:	4b05      	ldr	r3, [pc, #20]	@ (8002650 <HAL_RCC_GetSysClockFreq+0x98>)
 800263a:	613b      	str	r3, [r7, #16]
      break;
 800263c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800263e:	693b      	ldr	r3, [r7, #16]
}
 8002640:	4618      	mov	r0, r3
 8002642:	371c      	adds	r7, #28
 8002644:	46bd      	mov	sp, r7
 8002646:	bc80      	pop	{r7}
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop
 800264c:	40021000 	.word	0x40021000
 8002650:	007a1200 	.word	0x007a1200
 8002654:	080031e4 	.word	0x080031e4
 8002658:	080031f4 	.word	0x080031f4
 800265c:	003d0900 	.word	0x003d0900

08002660 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002664:	4b02      	ldr	r3, [pc, #8]	@ (8002670 <HAL_RCC_GetHCLKFreq+0x10>)
 8002666:	681b      	ldr	r3, [r3, #0]
}
 8002668:	4618      	mov	r0, r3
 800266a:	46bd      	mov	sp, r7
 800266c:	bc80      	pop	{r7}
 800266e:	4770      	bx	lr
 8002670:	20000000 	.word	0x20000000

08002674 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002678:	f7ff fff2 	bl	8002660 <HAL_RCC_GetHCLKFreq>
 800267c:	4602      	mov	r2, r0
 800267e:	4b05      	ldr	r3, [pc, #20]	@ (8002694 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	0a1b      	lsrs	r3, r3, #8
 8002684:	f003 0307 	and.w	r3, r3, #7
 8002688:	4903      	ldr	r1, [pc, #12]	@ (8002698 <HAL_RCC_GetPCLK1Freq+0x24>)
 800268a:	5ccb      	ldrb	r3, [r1, r3]
 800268c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002690:	4618      	mov	r0, r3
 8002692:	bd80      	pop	{r7, pc}
 8002694:	40021000 	.word	0x40021000
 8002698:	080031dc 	.word	0x080031dc

0800269c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80026a0:	f7ff ffde 	bl	8002660 <HAL_RCC_GetHCLKFreq>
 80026a4:	4602      	mov	r2, r0
 80026a6:	4b05      	ldr	r3, [pc, #20]	@ (80026bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	0adb      	lsrs	r3, r3, #11
 80026ac:	f003 0307 	and.w	r3, r3, #7
 80026b0:	4903      	ldr	r1, [pc, #12]	@ (80026c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026b2:	5ccb      	ldrb	r3, [r1, r3]
 80026b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	40021000 	.word	0x40021000
 80026c0:	080031dc 	.word	0x080031dc

080026c4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b085      	sub	sp, #20
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80026cc:	4b0a      	ldr	r3, [pc, #40]	@ (80026f8 <RCC_Delay+0x34>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a0a      	ldr	r2, [pc, #40]	@ (80026fc <RCC_Delay+0x38>)
 80026d2:	fba2 2303 	umull	r2, r3, r2, r3
 80026d6:	0a5b      	lsrs	r3, r3, #9
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	fb02 f303 	mul.w	r3, r2, r3
 80026de:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80026e0:	bf00      	nop
  }
  while (Delay --);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	1e5a      	subs	r2, r3, #1
 80026e6:	60fa      	str	r2, [r7, #12]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d1f9      	bne.n	80026e0 <RCC_Delay+0x1c>
}
 80026ec:	bf00      	nop
 80026ee:	bf00      	nop
 80026f0:	3714      	adds	r7, #20
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bc80      	pop	{r7}
 80026f6:	4770      	bx	lr
 80026f8:	20000000 	.word	0x20000000
 80026fc:	10624dd3 	.word	0x10624dd3

08002700 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d101      	bne.n	8002712 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e041      	b.n	8002796 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002718:	b2db      	uxtb	r3, r3
 800271a:	2b00      	cmp	r3, #0
 800271c:	d106      	bne.n	800272c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f7fe fa9e 	bl	8000c68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2202      	movs	r2, #2
 8002730:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	3304      	adds	r3, #4
 800273c:	4619      	mov	r1, r3
 800273e:	4610      	mov	r0, r2
 8002740:	f000 fac6 	bl	8002cd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2201      	movs	r2, #1
 8002748:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2201      	movs	r2, #1
 8002750:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2201      	movs	r2, #1
 8002758:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2201      	movs	r2, #1
 8002760:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2201      	movs	r2, #1
 8002768:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2201      	movs	r2, #1
 8002770:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2201      	movs	r2, #1
 8002778:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2201      	movs	r2, #1
 8002780:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2201      	movs	r2, #1
 8002788:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2201      	movs	r2, #1
 8002790:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002794:	2300      	movs	r3, #0
}
 8002796:	4618      	mov	r0, r3
 8002798:	3708      	adds	r7, #8
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
	...

080027a0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b085      	sub	sp, #20
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d001      	beq.n	80027b8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e032      	b.n	800281e <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2202      	movs	r2, #2
 80027bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a18      	ldr	r2, [pc, #96]	@ (8002828 <HAL_TIM_Base_Start+0x88>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d00e      	beq.n	80027e8 <HAL_TIM_Base_Start+0x48>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027d2:	d009      	beq.n	80027e8 <HAL_TIM_Base_Start+0x48>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a14      	ldr	r2, [pc, #80]	@ (800282c <HAL_TIM_Base_Start+0x8c>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d004      	beq.n	80027e8 <HAL_TIM_Base_Start+0x48>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a13      	ldr	r2, [pc, #76]	@ (8002830 <HAL_TIM_Base_Start+0x90>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d111      	bne.n	800280c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	f003 0307 	and.w	r3, r3, #7
 80027f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2b06      	cmp	r3, #6
 80027f8:	d010      	beq.n	800281c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f042 0201 	orr.w	r2, r2, #1
 8002808:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800280a:	e007      	b.n	800281c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f042 0201 	orr.w	r2, r2, #1
 800281a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800281c:	2300      	movs	r3, #0
}
 800281e:	4618      	mov	r0, r3
 8002820:	3714      	adds	r7, #20
 8002822:	46bd      	mov	sp, r7
 8002824:	bc80      	pop	{r7}
 8002826:	4770      	bx	lr
 8002828:	40012c00 	.word	0x40012c00
 800282c:	40000400 	.word	0x40000400
 8002830:	40000800 	.word	0x40000800

08002834 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002834:	b480      	push	{r7}
 8002836:	b085      	sub	sp, #20
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002842:	b2db      	uxtb	r3, r3
 8002844:	2b01      	cmp	r3, #1
 8002846:	d001      	beq.n	800284c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e03a      	b.n	80028c2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2202      	movs	r2, #2
 8002850:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	68da      	ldr	r2, [r3, #12]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f042 0201 	orr.w	r2, r2, #1
 8002862:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a18      	ldr	r2, [pc, #96]	@ (80028cc <HAL_TIM_Base_Start_IT+0x98>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d00e      	beq.n	800288c <HAL_TIM_Base_Start_IT+0x58>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002876:	d009      	beq.n	800288c <HAL_TIM_Base_Start_IT+0x58>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a14      	ldr	r2, [pc, #80]	@ (80028d0 <HAL_TIM_Base_Start_IT+0x9c>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d004      	beq.n	800288c <HAL_TIM_Base_Start_IT+0x58>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a13      	ldr	r2, [pc, #76]	@ (80028d4 <HAL_TIM_Base_Start_IT+0xa0>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d111      	bne.n	80028b0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f003 0307 	and.w	r3, r3, #7
 8002896:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2b06      	cmp	r3, #6
 800289c:	d010      	beq.n	80028c0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f042 0201 	orr.w	r2, r2, #1
 80028ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028ae:	e007      	b.n	80028c0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f042 0201 	orr.w	r2, r2, #1
 80028be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3714      	adds	r7, #20
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bc80      	pop	{r7}
 80028ca:	4770      	bx	lr
 80028cc:	40012c00 	.word	0x40012c00
 80028d0:	40000400 	.word	0x40000400
 80028d4:	40000800 	.word	0x40000800

080028d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	691b      	ldr	r3, [r3, #16]
 80028e6:	f003 0302 	and.w	r3, r3, #2
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d122      	bne.n	8002934 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	f003 0302 	and.w	r3, r3, #2
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d11b      	bne.n	8002934 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f06f 0202 	mvn.w	r2, #2
 8002904:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2201      	movs	r2, #1
 800290a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	699b      	ldr	r3, [r3, #24]
 8002912:	f003 0303 	and.w	r3, r3, #3
 8002916:	2b00      	cmp	r3, #0
 8002918:	d003      	beq.n	8002922 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f000 f9bd 	bl	8002c9a <HAL_TIM_IC_CaptureCallback>
 8002920:	e005      	b.n	800292e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f000 f9b0 	bl	8002c88 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f000 f9bf 	bl	8002cac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	691b      	ldr	r3, [r3, #16]
 800293a:	f003 0304 	and.w	r3, r3, #4
 800293e:	2b04      	cmp	r3, #4
 8002940:	d122      	bne.n	8002988 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	f003 0304 	and.w	r3, r3, #4
 800294c:	2b04      	cmp	r3, #4
 800294e:	d11b      	bne.n	8002988 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f06f 0204 	mvn.w	r2, #4
 8002958:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2202      	movs	r2, #2
 800295e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	699b      	ldr	r3, [r3, #24]
 8002966:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800296a:	2b00      	cmp	r3, #0
 800296c:	d003      	beq.n	8002976 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f000 f993 	bl	8002c9a <HAL_TIM_IC_CaptureCallback>
 8002974:	e005      	b.n	8002982 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f000 f986 	bl	8002c88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f000 f995 	bl	8002cac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	691b      	ldr	r3, [r3, #16]
 800298e:	f003 0308 	and.w	r3, r3, #8
 8002992:	2b08      	cmp	r3, #8
 8002994:	d122      	bne.n	80029dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	f003 0308 	and.w	r3, r3, #8
 80029a0:	2b08      	cmp	r3, #8
 80029a2:	d11b      	bne.n	80029dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f06f 0208 	mvn.w	r2, #8
 80029ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2204      	movs	r2, #4
 80029b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	69db      	ldr	r3, [r3, #28]
 80029ba:	f003 0303 	and.w	r3, r3, #3
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d003      	beq.n	80029ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f000 f969 	bl	8002c9a <HAL_TIM_IC_CaptureCallback>
 80029c8:	e005      	b.n	80029d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f000 f95c 	bl	8002c88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f000 f96b 	bl	8002cac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	691b      	ldr	r3, [r3, #16]
 80029e2:	f003 0310 	and.w	r3, r3, #16
 80029e6:	2b10      	cmp	r3, #16
 80029e8:	d122      	bne.n	8002a30 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	f003 0310 	and.w	r3, r3, #16
 80029f4:	2b10      	cmp	r3, #16
 80029f6:	d11b      	bne.n	8002a30 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f06f 0210 	mvn.w	r2, #16
 8002a00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2208      	movs	r2, #8
 8002a06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	69db      	ldr	r3, [r3, #28]
 8002a0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d003      	beq.n	8002a1e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f000 f93f 	bl	8002c9a <HAL_TIM_IC_CaptureCallback>
 8002a1c:	e005      	b.n	8002a2a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f000 f932 	bl	8002c88 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f000 f941 	bl	8002cac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	691b      	ldr	r3, [r3, #16]
 8002a36:	f003 0301 	and.w	r3, r3, #1
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d10e      	bne.n	8002a5c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	f003 0301 	and.w	r3, r3, #1
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d107      	bne.n	8002a5c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f06f 0201 	mvn.w	r2, #1
 8002a54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f000 f90d 	bl	8002c76 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a66:	2b80      	cmp	r3, #128	@ 0x80
 8002a68:	d10e      	bne.n	8002a88 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a74:	2b80      	cmp	r3, #128	@ 0x80
 8002a76:	d107      	bne.n	8002a88 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002a80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f000 fa83 	bl	8002f8e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	691b      	ldr	r3, [r3, #16]
 8002a8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a92:	2b40      	cmp	r3, #64	@ 0x40
 8002a94:	d10e      	bne.n	8002ab4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002aa0:	2b40      	cmp	r3, #64	@ 0x40
 8002aa2:	d107      	bne.n	8002ab4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002aac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f000 f905 	bl	8002cbe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	691b      	ldr	r3, [r3, #16]
 8002aba:	f003 0320 	and.w	r3, r3, #32
 8002abe:	2b20      	cmp	r3, #32
 8002ac0:	d10e      	bne.n	8002ae0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	f003 0320 	and.w	r3, r3, #32
 8002acc:	2b20      	cmp	r3, #32
 8002ace:	d107      	bne.n	8002ae0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f06f 0220 	mvn.w	r2, #32
 8002ad8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f000 fa4e 	bl	8002f7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ae0:	bf00      	nop
 8002ae2:	3708      	adds	r7, #8
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002af2:	2300      	movs	r3, #0
 8002af4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d101      	bne.n	8002b04 <HAL_TIM_ConfigClockSource+0x1c>
 8002b00:	2302      	movs	r3, #2
 8002b02:	e0b4      	b.n	8002c6e <HAL_TIM_ConfigClockSource+0x186>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2202      	movs	r2, #2
 8002b10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002b22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002b2a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	68ba      	ldr	r2, [r7, #8]
 8002b32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b3c:	d03e      	beq.n	8002bbc <HAL_TIM_ConfigClockSource+0xd4>
 8002b3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b42:	f200 8087 	bhi.w	8002c54 <HAL_TIM_ConfigClockSource+0x16c>
 8002b46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b4a:	f000 8086 	beq.w	8002c5a <HAL_TIM_ConfigClockSource+0x172>
 8002b4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b52:	d87f      	bhi.n	8002c54 <HAL_TIM_ConfigClockSource+0x16c>
 8002b54:	2b70      	cmp	r3, #112	@ 0x70
 8002b56:	d01a      	beq.n	8002b8e <HAL_TIM_ConfigClockSource+0xa6>
 8002b58:	2b70      	cmp	r3, #112	@ 0x70
 8002b5a:	d87b      	bhi.n	8002c54 <HAL_TIM_ConfigClockSource+0x16c>
 8002b5c:	2b60      	cmp	r3, #96	@ 0x60
 8002b5e:	d050      	beq.n	8002c02 <HAL_TIM_ConfigClockSource+0x11a>
 8002b60:	2b60      	cmp	r3, #96	@ 0x60
 8002b62:	d877      	bhi.n	8002c54 <HAL_TIM_ConfigClockSource+0x16c>
 8002b64:	2b50      	cmp	r3, #80	@ 0x50
 8002b66:	d03c      	beq.n	8002be2 <HAL_TIM_ConfigClockSource+0xfa>
 8002b68:	2b50      	cmp	r3, #80	@ 0x50
 8002b6a:	d873      	bhi.n	8002c54 <HAL_TIM_ConfigClockSource+0x16c>
 8002b6c:	2b40      	cmp	r3, #64	@ 0x40
 8002b6e:	d058      	beq.n	8002c22 <HAL_TIM_ConfigClockSource+0x13a>
 8002b70:	2b40      	cmp	r3, #64	@ 0x40
 8002b72:	d86f      	bhi.n	8002c54 <HAL_TIM_ConfigClockSource+0x16c>
 8002b74:	2b30      	cmp	r3, #48	@ 0x30
 8002b76:	d064      	beq.n	8002c42 <HAL_TIM_ConfigClockSource+0x15a>
 8002b78:	2b30      	cmp	r3, #48	@ 0x30
 8002b7a:	d86b      	bhi.n	8002c54 <HAL_TIM_ConfigClockSource+0x16c>
 8002b7c:	2b20      	cmp	r3, #32
 8002b7e:	d060      	beq.n	8002c42 <HAL_TIM_ConfigClockSource+0x15a>
 8002b80:	2b20      	cmp	r3, #32
 8002b82:	d867      	bhi.n	8002c54 <HAL_TIM_ConfigClockSource+0x16c>
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d05c      	beq.n	8002c42 <HAL_TIM_ConfigClockSource+0x15a>
 8002b88:	2b10      	cmp	r3, #16
 8002b8a:	d05a      	beq.n	8002c42 <HAL_TIM_ConfigClockSource+0x15a>
 8002b8c:	e062      	b.n	8002c54 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002b9e:	f000 f970 	bl	8002e82 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002bb0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	68ba      	ldr	r2, [r7, #8]
 8002bb8:	609a      	str	r2, [r3, #8]
      break;
 8002bba:	e04f      	b.n	8002c5c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002bcc:	f000 f959 	bl	8002e82 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	689a      	ldr	r2, [r3, #8]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002bde:	609a      	str	r2, [r3, #8]
      break;
 8002be0:	e03c      	b.n	8002c5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bee:	461a      	mov	r2, r3
 8002bf0:	f000 f8d0 	bl	8002d94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	2150      	movs	r1, #80	@ 0x50
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f000 f927 	bl	8002e4e <TIM_ITRx_SetConfig>
      break;
 8002c00:	e02c      	b.n	8002c5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c0e:	461a      	mov	r2, r3
 8002c10:	f000 f8ee 	bl	8002df0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2160      	movs	r1, #96	@ 0x60
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f000 f917 	bl	8002e4e <TIM_ITRx_SetConfig>
      break;
 8002c20:	e01c      	b.n	8002c5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c2e:	461a      	mov	r2, r3
 8002c30:	f000 f8b0 	bl	8002d94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	2140      	movs	r1, #64	@ 0x40
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f000 f907 	bl	8002e4e <TIM_ITRx_SetConfig>
      break;
 8002c40:	e00c      	b.n	8002c5c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	4610      	mov	r0, r2
 8002c4e:	f000 f8fe 	bl	8002e4e <TIM_ITRx_SetConfig>
      break;
 8002c52:	e003      	b.n	8002c5c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	73fb      	strb	r3, [r7, #15]
      break;
 8002c58:	e000      	b.n	8002c5c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002c5a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2200      	movs	r2, #0
 8002c68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3710      	adds	r7, #16
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}

08002c76 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c76:	b480      	push	{r7}
 8002c78:	b083      	sub	sp, #12
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002c7e:	bf00      	nop
 8002c80:	370c      	adds	r7, #12
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bc80      	pop	{r7}
 8002c86:	4770      	bx	lr

08002c88 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c90:	bf00      	nop
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bc80      	pop	{r7}
 8002c98:	4770      	bx	lr

08002c9a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	b083      	sub	sp, #12
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ca2:	bf00      	nop
 8002ca4:	370c      	adds	r7, #12
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bc80      	pop	{r7}
 8002caa:	4770      	bx	lr

08002cac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002cb4:	bf00      	nop
 8002cb6:	370c      	adds	r7, #12
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bc80      	pop	{r7}
 8002cbc:	4770      	bx	lr

08002cbe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	b083      	sub	sp, #12
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002cc6:	bf00      	nop
 8002cc8:	370c      	adds	r7, #12
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bc80      	pop	{r7}
 8002cce:	4770      	bx	lr

08002cd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b085      	sub	sp, #20
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	4a29      	ldr	r2, [pc, #164]	@ (8002d88 <TIM_Base_SetConfig+0xb8>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d00b      	beq.n	8002d00 <TIM_Base_SetConfig+0x30>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cee:	d007      	beq.n	8002d00 <TIM_Base_SetConfig+0x30>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	4a26      	ldr	r2, [pc, #152]	@ (8002d8c <TIM_Base_SetConfig+0xbc>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d003      	beq.n	8002d00 <TIM_Base_SetConfig+0x30>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	4a25      	ldr	r2, [pc, #148]	@ (8002d90 <TIM_Base_SetConfig+0xc0>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d108      	bne.n	8002d12 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	68fa      	ldr	r2, [r7, #12]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4a1c      	ldr	r2, [pc, #112]	@ (8002d88 <TIM_Base_SetConfig+0xb8>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d00b      	beq.n	8002d32 <TIM_Base_SetConfig+0x62>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d20:	d007      	beq.n	8002d32 <TIM_Base_SetConfig+0x62>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4a19      	ldr	r2, [pc, #100]	@ (8002d8c <TIM_Base_SetConfig+0xbc>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d003      	beq.n	8002d32 <TIM_Base_SetConfig+0x62>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4a18      	ldr	r2, [pc, #96]	@ (8002d90 <TIM_Base_SetConfig+0xc0>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d108      	bne.n	8002d44 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	68fa      	ldr	r2, [r7, #12]
 8002d40:	4313      	orrs	r3, r2
 8002d42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	695b      	ldr	r3, [r3, #20]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	68fa      	ldr	r2, [r7, #12]
 8002d56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	689a      	ldr	r2, [r3, #8]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	4a07      	ldr	r2, [pc, #28]	@ (8002d88 <TIM_Base_SetConfig+0xb8>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d103      	bne.n	8002d78 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	691a      	ldr	r2, [r3, #16]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	615a      	str	r2, [r3, #20]
}
 8002d7e:	bf00      	nop
 8002d80:	3714      	adds	r7, #20
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bc80      	pop	{r7}
 8002d86:	4770      	bx	lr
 8002d88:	40012c00 	.word	0x40012c00
 8002d8c:	40000400 	.word	0x40000400
 8002d90:	40000800 	.word	0x40000800

08002d94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b087      	sub	sp, #28
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	60f8      	str	r0, [r7, #12]
 8002d9c:	60b9      	str	r1, [r7, #8]
 8002d9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6a1b      	ldr	r3, [r3, #32]
 8002da4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	6a1b      	ldr	r3, [r3, #32]
 8002daa:	f023 0201 	bic.w	r2, r3, #1
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	699b      	ldr	r3, [r3, #24]
 8002db6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002dbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	011b      	lsls	r3, r3, #4
 8002dc4:	693a      	ldr	r2, [r7, #16]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	f023 030a 	bic.w	r3, r3, #10
 8002dd0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002dd2:	697a      	ldr	r2, [r7, #20]
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	693a      	ldr	r2, [r7, #16]
 8002dde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	697a      	ldr	r2, [r7, #20]
 8002de4:	621a      	str	r2, [r3, #32]
}
 8002de6:	bf00      	nop
 8002de8:	371c      	adds	r7, #28
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bc80      	pop	{r7}
 8002dee:	4770      	bx	lr

08002df0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b087      	sub	sp, #28
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	60b9      	str	r1, [r7, #8]
 8002dfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6a1b      	ldr	r3, [r3, #32]
 8002e00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	6a1b      	ldr	r3, [r3, #32]
 8002e06:	f023 0210 	bic.w	r2, r3, #16
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	699b      	ldr	r3, [r3, #24]
 8002e12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002e1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	031b      	lsls	r3, r3, #12
 8002e20:	693a      	ldr	r2, [r7, #16]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002e2c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	011b      	lsls	r3, r3, #4
 8002e32:	697a      	ldr	r2, [r7, #20]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	693a      	ldr	r2, [r7, #16]
 8002e3c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	697a      	ldr	r2, [r7, #20]
 8002e42:	621a      	str	r2, [r3, #32]
}
 8002e44:	bf00      	nop
 8002e46:	371c      	adds	r7, #28
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bc80      	pop	{r7}
 8002e4c:	4770      	bx	lr

08002e4e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e4e:	b480      	push	{r7}
 8002e50:	b085      	sub	sp, #20
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	6078      	str	r0, [r7, #4]
 8002e56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e66:	683a      	ldr	r2, [r7, #0]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	f043 0307 	orr.w	r3, r3, #7
 8002e70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	68fa      	ldr	r2, [r7, #12]
 8002e76:	609a      	str	r2, [r3, #8]
}
 8002e78:	bf00      	nop
 8002e7a:	3714      	adds	r7, #20
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bc80      	pop	{r7}
 8002e80:	4770      	bx	lr

08002e82 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e82:	b480      	push	{r7}
 8002e84:	b087      	sub	sp, #28
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	60f8      	str	r0, [r7, #12]
 8002e8a:	60b9      	str	r1, [r7, #8]
 8002e8c:	607a      	str	r2, [r7, #4]
 8002e8e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002e9c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	021a      	lsls	r2, r3, #8
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	431a      	orrs	r2, r3
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	697a      	ldr	r2, [r7, #20]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	697a      	ldr	r2, [r7, #20]
 8002eb4:	609a      	str	r2, [r3, #8]
}
 8002eb6:	bf00      	nop
 8002eb8:	371c      	adds	r7, #28
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bc80      	pop	{r7}
 8002ebe:	4770      	bx	lr

08002ec0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b085      	sub	sp, #20
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d101      	bne.n	8002ed8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ed4:	2302      	movs	r3, #2
 8002ed6:	e046      	b.n	8002f66 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2202      	movs	r2, #2
 8002ee4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002efe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	68fa      	ldr	r2, [r7, #12]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	68fa      	ldr	r2, [r7, #12]
 8002f10:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a16      	ldr	r2, [pc, #88]	@ (8002f70 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d00e      	beq.n	8002f3a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f24:	d009      	beq.n	8002f3a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a12      	ldr	r2, [pc, #72]	@ (8002f74 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d004      	beq.n	8002f3a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a10      	ldr	r2, [pc, #64]	@ (8002f78 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d10c      	bne.n	8002f54 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	68ba      	ldr	r2, [r7, #8]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	68ba      	ldr	r2, [r7, #8]
 8002f52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002f64:	2300      	movs	r3, #0
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3714      	adds	r7, #20
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bc80      	pop	{r7}
 8002f6e:	4770      	bx	lr
 8002f70:	40012c00 	.word	0x40012c00
 8002f74:	40000400 	.word	0x40000400
 8002f78:	40000800 	.word	0x40000800

08002f7c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f84:	bf00      	nop
 8002f86:	370c      	adds	r7, #12
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bc80      	pop	{r7}
 8002f8c:	4770      	bx	lr

08002f8e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f8e:	b480      	push	{r7}
 8002f90:	b083      	sub	sp, #12
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f96:	bf00      	nop
 8002f98:	370c      	adds	r7, #12
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bc80      	pop	{r7}
 8002f9e:	4770      	bx	lr

08002fa0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b082      	sub	sp, #8
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d101      	bne.n	8002fb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e042      	b.n	8003038 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d106      	bne.n	8002fcc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f7fd fe8e 	bl	8000ce8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2224      	movs	r2, #36	@ 0x24
 8002fd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	68da      	ldr	r2, [r3, #12]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002fe2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f000 f82b 	bl	8003040 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	691a      	ldr	r2, [r3, #16]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002ff8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	695a      	ldr	r2, [r3, #20]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003008:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	68da      	ldr	r2, [r3, #12]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003018:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2220      	movs	r2, #32
 8003024:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2220      	movs	r2, #32
 800302c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003036:	2300      	movs	r3, #0
}
 8003038:	4618      	mov	r0, r3
 800303a:	3708      	adds	r7, #8
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}

08003040 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	691b      	ldr	r3, [r3, #16]
 800304e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	68da      	ldr	r2, [r3, #12]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	430a      	orrs	r2, r1
 800305c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	689a      	ldr	r2, [r3, #8]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	691b      	ldr	r3, [r3, #16]
 8003066:	431a      	orrs	r2, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	695b      	ldr	r3, [r3, #20]
 800306c:	4313      	orrs	r3, r2
 800306e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800307a:	f023 030c 	bic.w	r3, r3, #12
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	6812      	ldr	r2, [r2, #0]
 8003082:	68b9      	ldr	r1, [r7, #8]
 8003084:	430b      	orrs	r3, r1
 8003086:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	695b      	ldr	r3, [r3, #20]
 800308e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	699a      	ldr	r2, [r3, #24]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	430a      	orrs	r2, r1
 800309c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a2c      	ldr	r2, [pc, #176]	@ (8003154 <UART_SetConfig+0x114>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d103      	bne.n	80030b0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80030a8:	f7ff faf8 	bl	800269c <HAL_RCC_GetPCLK2Freq>
 80030ac:	60f8      	str	r0, [r7, #12]
 80030ae:	e002      	b.n	80030b6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80030b0:	f7ff fae0 	bl	8002674 <HAL_RCC_GetPCLK1Freq>
 80030b4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80030b6:	68fa      	ldr	r2, [r7, #12]
 80030b8:	4613      	mov	r3, r2
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	4413      	add	r3, r2
 80030be:	009a      	lsls	r2, r3, #2
 80030c0:	441a      	add	r2, r3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80030cc:	4a22      	ldr	r2, [pc, #136]	@ (8003158 <UART_SetConfig+0x118>)
 80030ce:	fba2 2303 	umull	r2, r3, r2, r3
 80030d2:	095b      	lsrs	r3, r3, #5
 80030d4:	0119      	lsls	r1, r3, #4
 80030d6:	68fa      	ldr	r2, [r7, #12]
 80030d8:	4613      	mov	r3, r2
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	4413      	add	r3, r2
 80030de:	009a      	lsls	r2, r3, #2
 80030e0:	441a      	add	r2, r3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80030ec:	4b1a      	ldr	r3, [pc, #104]	@ (8003158 <UART_SetConfig+0x118>)
 80030ee:	fba3 0302 	umull	r0, r3, r3, r2
 80030f2:	095b      	lsrs	r3, r3, #5
 80030f4:	2064      	movs	r0, #100	@ 0x64
 80030f6:	fb00 f303 	mul.w	r3, r0, r3
 80030fa:	1ad3      	subs	r3, r2, r3
 80030fc:	011b      	lsls	r3, r3, #4
 80030fe:	3332      	adds	r3, #50	@ 0x32
 8003100:	4a15      	ldr	r2, [pc, #84]	@ (8003158 <UART_SetConfig+0x118>)
 8003102:	fba2 2303 	umull	r2, r3, r2, r3
 8003106:	095b      	lsrs	r3, r3, #5
 8003108:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800310c:	4419      	add	r1, r3
 800310e:	68fa      	ldr	r2, [r7, #12]
 8003110:	4613      	mov	r3, r2
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	4413      	add	r3, r2
 8003116:	009a      	lsls	r2, r3, #2
 8003118:	441a      	add	r2, r3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	fbb2 f2f3 	udiv	r2, r2, r3
 8003124:	4b0c      	ldr	r3, [pc, #48]	@ (8003158 <UART_SetConfig+0x118>)
 8003126:	fba3 0302 	umull	r0, r3, r3, r2
 800312a:	095b      	lsrs	r3, r3, #5
 800312c:	2064      	movs	r0, #100	@ 0x64
 800312e:	fb00 f303 	mul.w	r3, r0, r3
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	011b      	lsls	r3, r3, #4
 8003136:	3332      	adds	r3, #50	@ 0x32
 8003138:	4a07      	ldr	r2, [pc, #28]	@ (8003158 <UART_SetConfig+0x118>)
 800313a:	fba2 2303 	umull	r2, r3, r2, r3
 800313e:	095b      	lsrs	r3, r3, #5
 8003140:	f003 020f 	and.w	r2, r3, #15
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	440a      	add	r2, r1
 800314a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800314c:	bf00      	nop
 800314e:	3710      	adds	r7, #16
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	40013800 	.word	0x40013800
 8003158:	51eb851f 	.word	0x51eb851f

0800315c <memset>:
 800315c:	4603      	mov	r3, r0
 800315e:	4402      	add	r2, r0
 8003160:	4293      	cmp	r3, r2
 8003162:	d100      	bne.n	8003166 <memset+0xa>
 8003164:	4770      	bx	lr
 8003166:	f803 1b01 	strb.w	r1, [r3], #1
 800316a:	e7f9      	b.n	8003160 <memset+0x4>

0800316c <__libc_init_array>:
 800316c:	b570      	push	{r4, r5, r6, lr}
 800316e:	2600      	movs	r6, #0
 8003170:	4d0c      	ldr	r5, [pc, #48]	@ (80031a4 <__libc_init_array+0x38>)
 8003172:	4c0d      	ldr	r4, [pc, #52]	@ (80031a8 <__libc_init_array+0x3c>)
 8003174:	1b64      	subs	r4, r4, r5
 8003176:	10a4      	asrs	r4, r4, #2
 8003178:	42a6      	cmp	r6, r4
 800317a:	d109      	bne.n	8003190 <__libc_init_array+0x24>
 800317c:	f000 f81a 	bl	80031b4 <_init>
 8003180:	2600      	movs	r6, #0
 8003182:	4d0a      	ldr	r5, [pc, #40]	@ (80031ac <__libc_init_array+0x40>)
 8003184:	4c0a      	ldr	r4, [pc, #40]	@ (80031b0 <__libc_init_array+0x44>)
 8003186:	1b64      	subs	r4, r4, r5
 8003188:	10a4      	asrs	r4, r4, #2
 800318a:	42a6      	cmp	r6, r4
 800318c:	d105      	bne.n	800319a <__libc_init_array+0x2e>
 800318e:	bd70      	pop	{r4, r5, r6, pc}
 8003190:	f855 3b04 	ldr.w	r3, [r5], #4
 8003194:	4798      	blx	r3
 8003196:	3601      	adds	r6, #1
 8003198:	e7ee      	b.n	8003178 <__libc_init_array+0xc>
 800319a:	f855 3b04 	ldr.w	r3, [r5], #4
 800319e:	4798      	blx	r3
 80031a0:	3601      	adds	r6, #1
 80031a2:	e7f2      	b.n	800318a <__libc_init_array+0x1e>
 80031a4:	080031f8 	.word	0x080031f8
 80031a8:	080031f8 	.word	0x080031f8
 80031ac:	080031f8 	.word	0x080031f8
 80031b0:	080031fc 	.word	0x080031fc

080031b4 <_init>:
 80031b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031b6:	bf00      	nop
 80031b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031ba:	bc08      	pop	{r3}
 80031bc:	469e      	mov	lr, r3
 80031be:	4770      	bx	lr

080031c0 <_fini>:
 80031c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031c2:	bf00      	nop
 80031c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031c6:	bc08      	pop	{r3}
 80031c8:	469e      	mov	lr, r3
 80031ca:	4770      	bx	lr
